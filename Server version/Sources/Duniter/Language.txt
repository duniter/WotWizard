MODULE DuniterLanguage;
	(* Gérard Meunier & Helmut Zinn -  *)

	IMPORT Dialog, Files, Strings;

	CONST
		defaultLanguage = "en";

	VAR
		dialog*: RECORD
			lang*: Dialog.List;
		END;

	PROCEDURE Search (lang: Dialog.Language): INTEGER;
		VAR
			i: INTEGER;
			entry: Dialog.String;
	BEGIN
		Strings.ToLower(lang, lang);
		i := dialog.lang.len - 1;
		dialog.lang.GetItem(i, entry);
		WHILE (i > 0) & (lang$ # entry$) DO
			DEC(i);
			dialog.lang.GetItem(i, entry);
		END;
		RETURN i;
	END Search;

	PROCEDURE Collect;
		VAR
			loc: Files.Locator;
			li: Files.LocInfo;
			lang: Dialog.Language;
			n: INTEGER;
	BEGIN
		dialog.lang.SetItem(0, defaultLanguage); (* use OM resourcen *)
		n := 1;
		loc := Files.dir.This("System/Rsrc/");
		li := Files.dir.LocList(loc);
		WHILE li # NIL DO
			IF LEN(li.name$) = 2 THEN
				Strings.ToLower(li.name, lang);
				dialog.lang.SetItem(n, lang);
				INC(n);
			END;
			li := li.next;
		END;
		dialog.lang.SetLen(n);
		dialog.lang.index := Search(Dialog.language);
		Dialog.UpdateList(dialog.lang);
		Dialog.Update(dialog);
	END Collect;

	PROCEDURE Change*;
		VAR
			entry: Dialog.String;
			res: INTEGER;
	BEGIN
		dialog.lang.GetItem(dialog.lang.index, entry);
		IF entry = defaultLanguage THEN entry := "" END;
		Dialog.SetLanguage(entry$, TRUE);
		Dialog.Update(dialog);
		Dialog.Call("StdMenuTool.UpdateAllMenus", "", res); (* this calls are done for DropDown & Toolbar only *)
		Dialog.Call("CpcDropDown.MakeDropDowns", "", res); (* call only if module CpcDropDown exist *)
		Dialog.Call("ToolbarStd.UpdateToolbar", "", res); (* call only if subsystem Toolbar exist *)
	END Change;

	PROCEDURE ChangeNotifier* (op, from, to: INTEGER);
	BEGIN
		IF (op = Dialog.changed) & (dialog.lang.index >= 0) THEN Change END;
	END ChangeNotifier;

BEGIN
	Collect;
END DuniterLanguage.
