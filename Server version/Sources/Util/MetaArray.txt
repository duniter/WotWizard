MODULE UtilMetaArray;
	
	

	IMPORT
		
		SYSTEM, Kernel, Meta;
	
	TYPE
		
		Item = Meta.Item;
		
		PROCEDURE ItemTypOf (item: Item): INTEGER;
			
			VAR
				
				kernelType: INTEGER;
			
			BEGIN (*ItemTypOf*)
				SYSTEM.GET(SYSTEM.ADR(item) + 20, kernelType); 	(* get hidden item.desc field *)
				RETURN kernelType;
			END ItemTypOf;
	
	PROCEDURE TypOf (struct: Kernel.Type): INTEGER;
		
		BEGIN (*TypOf*)
			IF SYSTEM.VAL(INTEGER, struct) DIV 256 = 0 THEN
				RETURN SHORT(SHORT(SYSTEM.VAL(INTEGER, struct)));
			ELSE
				RETURN SHORT(SHORT(16 + struct.id MOD 4));
			END
		END TypOf;
	
	PROCEDURE MakeArr* (IN item: Item; dim: INTEGER);
		
		VAR
			
			kernelType, addr: INTEGER;
			kt, arr, desc: Kernel.Type;
			b: POINTER TO ARRAY OF BOOLEAN;
			sc: POINTER TO ARRAY OF SHORTCHAR;
			c: POINTER TO ARRAY OF CHAR;
			bt: POINTER TO ARRAY OF BYTE;
			s: POINTER TO ARRAY OF SHORTINT;
			i: POINTER TO ARRAY OF INTEGER;
			sr: POINTER TO ARRAY OF SHORTREAL;
			r: POINTER TO ARRAY OF REAL;
			l: POINTER TO ARRAY OF LONGINT;
		
		BEGIN (*MakeArr*)
			IF dim > 0 THEN
				kernelType := ItemTypOf(item);
				kt := SYSTEM.VAL(Kernel.Type, kernelType);
				arr := kt.base[0];
				ASSERT(TypOf(arr) = Meta.arrTyp, 100);
				ASSERT(arr.mod.refcnt >= 0, 101);
				desc := arr.base[0];
				CASE TypOf(desc) OF
				|Meta.boolTyp:
					NEW(b, dim);
					SYSTEM.PUT(item.adr, SYSTEM.VAL(INTEGER, b));
				|Meta.sCharTyp:
					NEW(sc, dim);
					SYSTEM.PUT(item.adr, SYSTEM.VAL(INTEGER, sc));
				|Meta.charTyp:
					NEW(c, dim);
					SYSTEM.PUT(item.adr, SYSTEM.VAL(INTEGER, c));
				|Meta.byteTyp:
					NEW(bt, dim);
					SYSTEM.PUT(item.adr, SYSTEM.VAL(INTEGER, bt));
				|Meta.sIntTyp:
					NEW(s, dim);
					SYSTEM.PUT(item.adr, SYSTEM.VAL(INTEGER, s));
				|Meta.intTyp:
					NEW(i, dim);
					SYSTEM.PUT(item.adr, SYSTEM.VAL(INTEGER, i));
				|Meta.sRealTyp:
					NEW(sr, dim);
					SYSTEM.PUT(item.adr, SYSTEM.VAL(INTEGER, sr));
				|Meta.realTyp:
					NEW(r, dim);
					SYSTEM.PUT(item.adr, SYSTEM.VAL(INTEGER, r));
				|Meta.longTyp:
					NEW(l, dim);
					SYSTEM.PUT(item.adr, SYSTEM.VAL(INTEGER, l));
				|Meta.recTyp:
					(* type is structured *)
					(*ASSERT(SYSTEM.VAL(INTEGER,desc.fields.obj[0].struct) DIV 256 # 0, 29);*) 
					(* only 1-dimensional arrays supported *)
					addr := Kernel.NewArr(SYSTEM.VAL(INTEGER, desc), dim, 1); 	
					SYSTEM.PUT(addr + 12, dim); 	(* found no better way to set New array length *)
					SYSTEM.PUT(item.adr, addr);
				ELSE
					HALT(102)
				END
			END
		END MakeArr;
	
	END UtilMetaArray.
