BabelCompil

DEFINITION BabelCompil;

	CONST
		eOF1 = 00X;
		eOF2 = 1AX;
		eOL1 = 0DX;
		eOL2 = 0EX;
		stringObj = 0;
		userObj = 1;
		termObj = 2;
		nulObj = 3;

	TYPE
		String = POINTER TO ARRAY OF CHAR;
		Chaine = String;

		Compiler = POINTER TO LIMITED RECORD  END;

		Directory = POINTER TO ABSTRACT RECORD 
			(d: Directory) ReadInt- (OUT i: INTEGER), NEW, ABSTRACT;
			(d: Directory) ReadCompiler (): Compiler, NEW
		END;

		Compilation = POINTER TO ABSTRACT RECORD 
			(c: Compilation) Pos- (): INTEGER, NEW, ABSTRACT;
			(c: Compilation) SetPos- (pos: INTEGER), NEW, ABSTRACT;
			(c: Compilation) Read- (OUT ch: CHAR), NEW, ABSTRACT;
			(c: Compilation) Execution- (fNum, parsNb: INTEGER; pars: ObjectsList; OUT objPos: Object; OUT res: ANYPTR): BOOLEAN, NEW, ABSTRACT;
			(c: Compilation) Error (pos, line, col: INTEGER; IN msg: ARRAY OF CHAR), NEW, EMPTY;
			(c: Compilation) Map- (IN index: ARRAY OF CHAR): String, NEW, EXTENSIBLE;
			(c: Compilation) Compile (co: Compiler; lockIfError: BOOLEAN): BOOLEAN, NEW;
			(c: Compilation) LockIfError (lock: BOOLEAN), NEW;
			(c: Compilation) Lock, NEW;
			(c: Compilation) StopCompil, NEW
		END;

		Object = POINTER TO RECORD 
			(o: Object) ObjType (): BYTE, NEW;
			(o: Object) ObjNum (): INTEGER, NEW;
			(o: Object) ObjFunc (): INTEGER, NEW;
			(o: Object) ObjStringLen (): INTEGER, NEW;
			(o: Object) ObjString (VAR value: ARRAY OF CHAR), NEW;
			(o: Object) ObjUser (): ANYPTR, NEW;
			(o: Object) ObjTermSonsNb (): INTEGER, NEW;
			(o: Object) ObjTermSon (sonNum: INTEGER): Object, NEW;
			(o: Object) ErrorIn (): BOOLEAN, NEW;
			(o: Object) Position (): INTEGER, NEW;
			(o: Object) Line (): INTEGER, NEW;
			(o: Object) Column (): INTEGER, NEW
		END;

		ObjectsList = POINTER TO ARRAY OF Object;

	PROCEDURE Parameter (l: ObjectsList; num: INTEGER): Object;

END BabelCompil.


The module BabelCompil (Compil for short) is the online part of the Babel subsystem, a compiler compiler. The module BabelBabel converts a grammar written in a text definition document into tables written into a binary file (.tbl extension). Compil is able to read this .tbl file and to parse texts in accordance with provided grammar rules. There are three objects defined in Compil:
		-	Compiler (a compiler, which represents the content of a .tbl file);
		-	Compilation (a compilation instance, that one must provide with a compiler and several methods (Read for the reading of text, Execution for the implementation of hard functions ---see below---, Map, optional, for translations of messages, and Error, optional, for errors handling);
		-	Object (objects produced by the compilation process: strings extracted from text; results of hard functions; trees of Object, recursively produced by soft functions ---see below).
	Hard and soft functions are defined in grammar definition documents. A hard function is implemented in the Compilation.Execution method and produces an userObj result; a soft function doesn't require any method: it produces a tree (termObj) whose root is the function and whose subtrees are its arguments. TermeObj trees may be used later by hard functions.

CONST eOF1
End of file = eOF1 or eOF2.

CONST eOF2
End of file = eOF1 or eOF2.

CONST eOL1
End of line = eOL1, or eOL2, or eOL1 followed by eOL2.

CONST eOL2
End of line = eOL1, or eOL2, or eOL1 followed by eOL2.

CONST stringObj
Points out an Object containing a terminal string of the parsed text.

CONST userObj
Points out an Object containing the result of a hard function.

CONST termObj
Points out an Object containing a tree of Object, result of a soft function.

CONST nulObj
Points out an Object containing an empty Object, when an syntax error has occurred.

TYPE String
Dynamic string, result of Compilation.Map.
String replace Chaine, present in older version and now deprecated, but still present for compatibility.

TYPE Chaine
Deprecated, see String.

TYPE Compiler
LIMITED
A compiler. Result of the compilation by BabelBabel.Compile of a Babel definition text.

TYPE Directory
ABSTRACT
Compiler factory.

PROCEDURE (d: Directory) ReadInt- (OUT i: INTEGER)
NEW, ABSTRACT
Reads next integer in the binary file built by BabelBabel.Compile.

PROCEDURE (d: Directory) ReadCompiler (): Compiler, NEW;
Reads a compiler, i.e. the binary file built by BabelBabel.Compile, with the help of Directory.ReadInt. Warning: no validity test is done on the binary file.

TYPE Compilation
ABSTRACT
A compilation.

PROCEDURE (c: Compilation) Pos- (): INTEGER
NEW, ABSTRACT
Returns the current position in the input stream of characters (origin can have any value, and is read at the startup of procedure Compilation.Compile).

PROCEDURE (c: Compilation) SetPos- (pos: INTEGER)
NEW, ABSTRACT
Moves the current position in the input stream of characters to pos (origin must be the same as for Pos). pos may extend up to the position which follows the end of the text.

PROCEDURE (c: Compilation) Read- (OUT ch: CHAR)
NEW, ABSTRACT
Text reading method: ch is the next character read. When reading after the end of text, ch must return eOF1 or eOF2.

PROCEDURE (c: Compilation) Execution- (fNum, parsNb: INTEGER; pars: ObjectsList; OUT objPos: Object; OUT res: ANYPTR): BOOLEAN
NEW, ABSTRACT
Execution of hard functions: fNum is the index of the hard function, parsNb is the number of input parameters; pars is the list of input parameters; objPos is an Object whose position in text will be the position of res; res is the result of the hard function (objUtil); the boolean result indicates whether all is ok or not; if not, the resulting Object will contain an error.

PROCEDURE (c: Compilation) Error (pos, line, col: INTEGER; IN msg: ARRAY OF CHAR)
NEW, EMPTY
Lexical and syntactic errors notification: pos position, line line number and col column number of the error; msg is the error message. pos, line and col are numbered from 1.

PROCEDURE (c: Compilation) Map- (IN index: ARRAY OF CHAR): String
NEW, EXTENSIBLE
Maps an index text to a more lengthy one. Used to make explicit or to translate error messages. The original methods merly copies index to result.

PROCEDURE (c: Compilation) Compile (co: Compiler; lockIfError: BOOLEAN): BOOLEAN
NEW
Start of a compilation; co is the compiler used (must be loaded before); lockIfError: if true, inhibits the later calls of the Execution method when a lexical or syntactic error has occurred; the boolean result indicates whether all is ok or not.
Pre
co# NIL	20

PROCEDURE (c: Compilation) LockIfError (lock: BOOLEAN)
NEW
During a compilation, modifies the value of the lockIfError parameter of the Compile method.

PROCEDURE (c: Compilation) Lock
NEW
Activates a serious semantic error: hard functions are no more called.

PROCEDURE (c: Compilation) StopCompil
NEW
Stops compilation at once.

TYPE Object
LIMITED
An Object, string extracted from the text or result of a hard or soft function.

PROCEDURE (o: Object) ObjType (): BYTE
NEW
Gives the type of content of an Object: stringObj (terminal string of the parsed text), userObj (result of a hard function), termObj (tree of Object, result of a soft function) or nulObj (empty Object, when an syntax error has occurred).

PROCEDURE (o: Object) ObjNum (): INTEGER
NEW
Gives the number of an userObj or termObj Object, defined in the DECLARATION section of a Babel definition text.

PROCEDURE (o: Object) ObjFunc (): INTEGER
NEW
Gives the number of the hard or soft function which created the userObj or termObj Object.

PROCEDURE (o: Object) ObjStringLen (): INTEGER
NEW
Gives the length of the string contained in a stringObj Object.
Pre
o is a stringObj Object	20

PROCEDURE (o: Object) ObjString (VAR value: ARRAY OF CHAR)
NEW
Returns, in value, the string contained in a stringObj Object or, else, the value parameter is not changed.
Pre
o is a stringObj Object	20

PROCEDURE (o: Object) ObjUser (): ANYPTR
NEW
Gives the data contained in an userObj Object.
Pre
o is a userObj Object	20

PROCEDURE (o: Object) ObjTermSonsNb (): INTEGER
NEW
Gives the number of subtrees of a termObj Object.
Pre
o is a termObj Object	20

PROCEDURE (o: Object) ObjTermSon (sonNum: INTEGER): Object
NEW
Gives a subtree of a termObj Object: sonNum is the index of the subtree (1 first). sonNum must be strictly positive and not greater than the number of subtrees of o.
Pre
o is a termObj Object	20
sonNum> 0	21
sonNum<= o.ObjTermSonsNb()	22

PROCEDURE (o: Object) ErrorIn (): BOOLEAN
NEW
Tests whether o has the type nulObj, or the type userObj with error, or the type termObj with error or with a descendant in error.

PROCEDURE (o: Object) Position (): INTEGER
NEW
Position, numbered from 1, in the parsed text, of a stringObj or userObj Object.
Pre
o is a stringObj or userObj Object	20

PROCEDURE (o: Object) Line (): INTEGER
NEW
Line number, numbered from 1, in the parsed text, of a stringObj or userObj Object.
Pre
o is a stringObj or userObj Object	20

PROCEDURE (o: Object) Column (): INTEGER
NEW
Column number, numbered from 1, in the parsed text, of a stringObj or userObj Object.
Pre
o is a stringObj or userObj Object	20

TYPE ObjectsList
A list of Object, parameters of a hard function.

PROCEDURE Parameter (l: ObjectsList; num: INTEGER): Object
Extracts an Object of an ObjectsList: l: the list; num: the index in the list (1 first). num must be strictly positive and not greater than the number of Objects in l.
Pre
l# NIL	20
num> 0	21
num<= LEN(l)	22
