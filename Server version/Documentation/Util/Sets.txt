UtilSets

DEFINITION UtilSets;

	TYPE
		Set = POINTER TO LIMITED RECORD 
			nbElems-: INTEGER;
			(s: Set) Clear (min, max: INTEGER): Set, NEW;
			(s: Set) Flood (min, max: INTEGER), NEW;
			(s: Set) Fill (min, max: INTEGER): Set, NEW;
			(s: Set) Incl (e: INTEGER), NEW;
			(s1: Set) Add (s2: Set), NEW;
			(s1: Set) Union (s2: Set): Set, NEW;
			(s1: Set) Inter (s2: Set): Set, NEW;
			(s1: Set) Diff (s2: Set): Set, NEW;
			(s1: Set) XOR (s2: Set): Set, NEW;
			(s: Set) In (e: INTEGER): BOOLEAN, NEW;
			(s: Set) IsEmpty (): BOOLEAN, NEW;
			(s1: Set) Equal (s2: Set): BOOLEAN, NEW;
			(s1: Set) Subset (s2: Set): BOOLEAN, NEW;
			(s: Set) Copy (): Set, NEW
		END;

		SetIterator = RECORD 
			(VAR i: SetIterator) Attach (s: Set), NEW;
			(VAR i: SetIterator) FirstE (OUT e: INTEGER): BOOLEAN, NEW;
			(VAR i: SetIterator) NextE (OUT e: INTEGER): BOOLEAN, NEW
		END;

	PROCEDURE NewSet (): Set;
	PROCEDURE Interval (min, max: INTEGER): Set;
	PROCEDURE Small (se: SET): Set;

END UtilSets.

The module UtilSets implements the type Set, a set of non-negative integers, represented by hashing.

TYPE Set
Set of non-negative integers.

nbElems-: INTEGER
Number of elements in the set.

PROCEDURE (s: Set) Clear (min, max: INTEGER): Set
NEW
Returns the set s with the interval min..max removed.

PROCEDURE (s: Set) Flood (min, max: INTEGER)
NEW
Fill the interval min..max in the set s. Much more efficient than Fill.

PROCEDURE (s: Set) Fill (min, max: INTEGER): Set
NEW
Returns the set s with the interval min..max filled.

PROCEDURE (s: Set) Incl (e: INTEGER)
NEW
Include the integer e in the set s.

PROCEDURE (s1: Set) Add (s2: Set)
NEW
Returns in s1 the union of s1 and s2. Much more efficient than Union.

Pre
s2 # NIL	20

PROCEDURE (s1: Set) Union (s2: Set): Set
NEW
Returns the union of s1 and s2.

Pre
s2 # NIL	20

PROCEDURE (s1: Set) Inter (s2: Set): Set
NEW
Return the intersection of s1 and s2.

Pre
s2 # NIL	20

PROCEDURE (s1: Set) Diff (s2: Set): Set
NEW
Return the difference between s1 and s2.

Pre
s2 # NIL	20

PROCEDURE (s1: Set) XOR (s2: Set): Set
NEW
Return the exclusive union of s1 and s2.

Pre
s2 # NIL	20

PROCEDURE (s: Set) In (e: INTEGER): BOOLEAN
NEW
Check whether the integer e is in the set s. 

PROCEDURE (s: Set) IsEmpty (): BOOLEAN
NEW
Check whether s is empty.

PROCEDURE (s1: Set) Equal (s2: Set): BOOLEAN
NEW
Check whether s1 = s2.

Pre
s2 # NIL	20

PROCEDURE (s1: Set) Subset (s2: Set): BOOLEAN
NEW
Check whether s1 is a subset (in the broad sense of the word) of s2.

Pre
s2 # NIL	20

PROCEDURE (s: Set) Copy (): Set
NEW
Create and return a copy of s.

TYPE SetIterator
Iterator of a Set..

PROCEDURE (VAR i: SetIterator) Attach (s: Set), NEW;
Attach the set s to i..

Pre
s # NIL	20

PROCEDURE (VAR i: SetIterator) FirstE (OUT e: INTEGER): BOOLEAN
NEW
On return, e contains the first integer of the set attached to i. Return TRUE if such an integer exists. Usage: ok := i.FirstE(e); WHILE ok DO ... ok := i.NextE(e) END;. Using FirstE & NextE works faster than using NextElem.

Pre
i has been attached to a Set	20

PROCEDURE (VAR i: SetIterator) NextE (OUT e: INTEGER): BOOLEAN
NEW
On return, e contains the next integer of the set attached to i. Return TRUE if such an integer exists. i.FirstE must have been called once before i.NextE. Usage: ok := i.FirstE(e); WHILE ok DO ... ok := i.NextE(e) END;. Using FirstE & NextE works faster than using NextElem.

Pre
i has been attached to a Set	20
i.First was called once before	21

PROCEDURE NewSet (): Set
Creates and returns a new empty set.

PROCEDURE Interval (min, max: INTEGER): Set
Creates and returns a new set initialized to the interval min..max.

PROCEDURE Small (se: SET): Set
Returns a set equivalent to the Component Pascal SET se.
