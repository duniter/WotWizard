UtilSets

DEFINITION UtilSets;

	CONST
		sMin = 0;
		sMax = MAX(INTEGER) - 1;

	TYPE
		Set = POINTER TO LIMITED RECORD 
			nbElems-: INTEGER;
			(s: Set) Empty, NEW;
			(s: Set) Full, NEW;
			(s: Set) Interval (min, max: INTEGER), NEW;
			(s: Set) Clear (min, max: INTEGER), NEW;
			(s: Set) Fill (min, max: INTEGER), NEW;
			(s: Set) Incl (e: INTEGER), NEW;
			(s: Set) Excl (e: INTEGER), NEW;
			(s: Set) Small (se: SET), NEW;
			(s1: Set) Union (s2: Set): Set, NEW;
			(s1: Set) Inter (s2: Set): Set, NEW;
			(s1: Set) Diff (s2: Set): Set, NEW;
			(s1: Set) XOR (s2: Set): Set, NEW;
			(s: Set) In (e: INTEGER): BOOLEAN, NEW;
			(s: Set) NbOfElems (): INTEGER, NEW;
			(s: Set) IsEmpty (): BOOLEAN, NEW;
			(s1: Set) Equal (s2: Set): BOOLEAN, NEW;
			(s1: Set) Subset (s2: Set): BOOLEAN, NEW;
			(s: Set) NextElem (inc: BOOLEAN; VAR e: INTEGER): BOOLEAN, NEW;
			(s: Set) FirstE (OUT e: INTEGER): BOOLEAN, NEW;
			(s: Set) NextE (OUT e: INTEGER): BOOLEAN, NEW;
			(s: Set) First (OUT min, max: INTEGER): BOOLEAN, NEW;
			(s: Set) Next (OUT min, max: INTEGER): BOOLEAN, NEW;
			(s: Set) Copy (): Set, NEW
		END;

	PROCEDURE NewSet (): Set;

END UtilSets.

The module UtilSets implements the type Set, a set of non-negative integers, represented by intervals.

CONST sMin
The smallest integer in sets.

CONST sMax
The largest integer in sets.

TYPE Set
Set of non-negative integers.

nbElems-: INTEGER
Number of elements in the set.

PROCEDURE (s: Set) Empty
NEW
Empties the set s.

PROCEDURE (s: Set) Full
NEW
Returns in s the largest set available: sMin..sMax.

PROCEDURE (s: Set) Interval (min, max: INTEGER)
NEW
Sets s to the interval min..max.

Pre
min..max is included in sMin..sMax	20

PROCEDURE (s: Set) Clear (min, max: INTEGER)
NEW
Removes the interval min..max from the set s.

PROCEDURE (s: Set) Fill (min, max: INTEGER)
NEW
Adds the interval min..max to the set s.

PROCEDURE (s: Set) Incl (e: INTEGER)
NEW
Includes the integer e in the set s.

PROCEDURE (s: Set) Excl (e: INTEGER)
NEW
Excludes the integer e from the set s.

PROCEDURE (s: Set) Small (se: SET)
NEW
Sets s to the Component Pascal SET se.

PROCEDURE (s1: Set) Union (s2: Set): Set
NEW
Returns the union of s1 and s2.

Pre
s2 # NIL	20

PROCEDURE (s1: Set) Inter (s2: Set): Set
NEW
Returns the intersection of s1 and s2.

Pre
s2 # NIL	20

PROCEDURE (s1: Set) Diff (s2: Set): Set
NEW
Returns the difference between s1 and s2.

Pre
s2 # NIL	20

PROCEDURE (s1: Set) XOR (s2: Set): Set
NEW
Returns the exclusive union of s1 and s2.

Pre
s2 # NIL	20

PROCEDURE (s: Set) In (e: INTEGER): BOOLEAN
NEW
Tests whether the integer e is in the set s. 

PROCEDURE (s: Set) NbOfElems (): INTEGER
NEW
Returns the number of elements in s.

PROCEDURE (s: Set) IsEmpty (): BOOLEAN
NEW
Tests whether s is empty.

PROCEDURE (s1: Set) Equal (s2: Set): BOOLEAN
NEW
Tests whether s1 = s2.

PROCEDURE (s1: Set) Subset (s2: Set): BOOLEAN
NEW
Tests whether s1 is a subset (in the broad sense of the word) of s2.

PROCEDURE (s: Set) NextElem (inc: BOOLEAN; VAR e: INTEGER): BOOLEAN
NEW
Replaces e by the next integer e' of s. If inc = TRUE, e' > e; otherwise, e' < e. e may be outside of the interval sMin..sMax, but e' is inside it. Returns TRUE if there is such a successor of e, otherwise e is unchanged. Usage: e := sMin - 1; WHILE s.NextElem(TRUE, e) DO ... END;

PROCEDURE (s: Set) FirstE (OUT e: INTEGER): BOOLEAN
NEW
On return, e contains the first integer of the set s. Returns TRUE if such an integer exists. Usage: ok := s.FirstE(e); WHILE ok DO ... ok := s.NextE(e) END;. Using FirstE & NextE works faster than using NextElem.

PROCEDURE (s: Set) NextE (OUT e: INTEGER): BOOLEAN
NEW
On return, e contains the next integer of the set s. Returns TRUE if such an integer exists. s.FirstE must have been called once before s.NextE. Usage: ok := s.FirstE(e); WHILE ok DO ... ok := s.NextE(e) END;. Using FirstE & NextE works faster than using NextElem.

PROCEDURE (s: Set) First (OUT min, max: INTEGER): BOOLEAN
NEW
On return, min and max contain the first interval of the set s. Returns TRUE if such an interval exists. Usage: ok := s.First(a, b); WHILE ok DO ... ok := s.Next(a, b) END;

PROCEDURE (s: Set) Next (OUT min, max: INTEGER): BOOLEAN
NEW
On return, min and max contain the next interval of the set s. Returns TRUE if such an interval exists. s.First must have been called once before s.Next. Usage: ok := s.First(a, b); WHILE ok DO ... ok := s.Next(a, b) END;

Pre
s.First was called once before	20

PROCEDURE (s: Set) Copy (): Set
NEW
Creates and returns a copy of s.

PROCEDURE NewSet (): Set
Creates and returns a new empty set.