SQLiteDriver

DEFINITION SQLiteDriver	(* nonportable (i386) *);

	IMPORT SqlDrivers;

	VAR
		gDriver-: Driver;

	PROCEDURE Errcode (d: SqlDrivers.Driver): INTEGER;
	PROCEDURE Errmsg (d: SqlDrivers.Driver): POINTER TO ARRAY OF CHAR;
	PROCEDURE Changes (d: SqlDrivers.Driver): INTEGER;
	PROCEDURE LastInsertRowid (d: SqlDrivers.Driver): LONGINT;
	PROCEDURE GetAutocommit (d: SqlDrivers.Driver): BOOLEAN;

	PROCEDURE Open (id, password, datasource: ARRAY OF CHAR; async, showErr: BOOLEAN; OUT d: SqlDrivers.Driver; OUT res: INTEGER);

END SQLiteDriver.


Driver for SQLite database.
Considerations:

	1. Commit
		- By default the SQLite DB is in autocommit mode, i.e. an implicit COMMIT is issued after each statement executed via Exec method.
		- If you want to issue several INSERT, UPDATE or DELETE statements in a truly transactional mode, then you must first issue the SQL statement "BEGIN" or "BEGIN IMMEDIATE". This disables temporaly the autocommit mode for the DB connection. To finish the transaction you must issue a COMMIT or ROLLBACK statement; this will re-enable the autocommit mode.
		- See: https://www.sqlite.org/lang_transaction.html, https://www.sqlite.org/c3ref/get_autocommit.html.
		
	2. Foreign key constraints
		- Foreign key constraints are disabled by default.
		- To enable FK, after opening the DB connection, you must first issue the SQL statement "PRAGMA foreign_keys = ON".
		- To avoid performance problems, you will need additional indexes for the FK columns.
		- See https://www.sqlite.org/foreignkeys.html.
		
	3. Null values
		- Although the SQLite DB admits null values, this driver does not work well with them.
		- So be careful creating a table with columns that admit nulls.
		- If the driver reads a null value from database, it will be transformed into "" o zero, depending of the type of the receiving variable. If you need to know explicitly if a null value was read, you can use in your select statement, for example, "ifnull(my_column, '-9e99') as my_column" or "coalesce(my_column, '-9e99') as my_column".
		- See https://www.sqlite.org/lang_corefunc.html.


VAR gDriver
The purpose of variable gDriver is to know what is the SQLite driver of the last opened DB connection (SqlDB.Database). Why do we need this? Because normally the client doesn't know anything about the SQLite driver; he only knows about a SqlDB.Database. But the access to the SQLite driver is interesting because it gives us access to specific information, such as the "number of rows affected by the last INSERT, UPDATE or DELETE statement" (see function Changes below).
It would be nice if that information would be accesible via the more abstract SqlDB.Database, but it is not; so this variable gDriver.
Suggested use:
	1. Client calls SqlDB.OpenDatabase to get a DB connection.
	2. Client stores SQLiteDriver.gDriver in a own variable of type SqlDrivers.Driver. Note: if client needs to open only one DB connection then he can use SQLiteDriver.gDriver directly, or easier, use NIL as parameter to functions (see below).
	3. Now client can call functions: Errmsg, Changes, etc. If only one DB connection then he can pass NIL as parameter.
Note:
Using gDriver we can open various separated DB connections simultaneously, each one having its own SQLite driver. But instead of this, we can use the SQLite statement "ATTACH", that offers the possibility to work with various independent databases under the same DB connection. See https://www.sqlite.org/lang_attach.html.


PROCEDURE Errcode (d: SqlDrivers.Driver): INTEGER
Returns the numeric result code (SQLite specific) of the most recent statement. See SQLiteLib.
Parameter d is the SQLite driver for DB connection; if NULL then the most recent DB connection opened is assumed.

PROCEDURE Errmsg (d: SqlDrivers.Driver): POINTER TO ARRAY OF CHAR
Returns the description of the result code of the most recent statement.
Parameter d is the SQLite driver for DB connection; if NULL then the most recent DB connection opened is assumed.

PROCEDURE Changes (d: SqlDrivers.Driver): INTEGER
Returns the number of rows affected by the last succesful INSERT, UPDATE or DELETE statement.
Parameter d is the SQLite driver for DB connection; if NULL then the most recent DB connection opened is assumed.

PROCEDURE LastInsertRowid (d: SqlDrivers.Driver): LONGINT
Returns the ROWID of the last successful INSERT statement. Normally the ROWID is the column declared as "INTEGER PRIMARY KEY".
Parameter d is the SQLite driver for DB connection; if NULL then the most recent DB connection opened is assumed.

PROCEDURE GetAutocommit (d: SqlDrivers.Driver): BOOLEAN
Returns TRUE iff the DB connection is in autocommit mode. Autocommit mode is on by default; can be disabled by a BEGIN statement; and re-enabled by a COMMIT or ROLLBACK statement.
Parameter d is the SQLite driver for DB connection; if NULL then the most recent DB connection opened is assumed.


PROCEDURE Open (id, password, datasource: ARRAY OF CHAR; async, showErr: BOOLEAN; OUT d: SqlDrivers.Driver; OUT res: INTEGER)
Opens the SQLite DB connection.
Note that usually this function is only called internally, when the client tries to open a DB connection:
	SqlDB.OpenDatabase —> SqlDrivers.Open —> SQLiteDriver.Open

Parameter datasource can have the special value ":memory:", meaning that instead of the DB being an external file stored in disk, the DB will be private and temporary, created ad hoc, living transiently in memory, and vanishing when the DB connection is closed.

Parameters id and password are usually the user and the password that will be used to open the DB connection; but an SQLite DB does not have them. Therefore parameter id is used this way:
	- If id = "READ_ONLY" then the DB will be opened in read-only mode, and an error will be raised if the DB does not already exist.
	- Otherwise the DB will be opened normally, i.e. for reading and writing (unless the DB file is write protected); also, if the DB does not already exist, it will be created.
Example to open a DB in read-only mode:
	SqlDB.OpenDatabase("SQLiteDriver", "READ_ONLY", "any", "a/b/myDb.sqlite", ..);

