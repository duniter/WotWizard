(* 
Duniter1: WotWizard.

Copyright (C) 2017 GérardMeunier

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  for more details.

You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*)

MODULE Duniter1BlockchainPrint;
	
	

	IMPORT
		
		BA := Duniter1BasicPrint, Dialog, Files, Services, Strings, UtilExternal, J := UtilJson;
	
	CONST
		
		cmdsPath = "WWCmds.exe";
		stopName = "Stop.txt";
		
		(* Directory of the Parameters json file, in the WotWizard directory *)
		dDir = "Duniter1";
		updtStatusName = "Status.json";
		
		action1Delay = 2 * Services.resolution;
		action2Delay = 200;
		
		(* Max length of a Pubkey *)
		pubkeyLen* = 44;
		
		(* Max length of a Hash *)
		hashLen* = 64;
	
	TYPE
		
		Action1 = POINTER TO RECORD (Services.Action)
		END;
		
		Action2 = POINTER TO RECORD (Services.Action)
		END;
		
		String* = BA.String;
		Pubkey* = ARRAY pubkeyLen + 1 OF CHAR;
		Hash* = ARRAY hashLen + 1 OF CHAR;
		
		Identity* = POINTER TO RECORD
			pubkey*: Pubkey;
			uid*: String;
			member*: BOOLEAN;
			hash*: Hash;
			block_number*: INTEGER; (* Where the Identity is written *)
			application*, (* Date of last membership application (joiners, actives, leavers) *)
			expires_on*: LONGINT;
		END;
	
	VAR
		
		lastBlock: INTEGER;
	
	PROCEDURE (a: Action1) Do;
		
		VAR
			
			j: J.Json;
		
		BEGIN (*Do*)
			IF BA.Check(dDir, updtStatusName) THEN
				j := J.ReadFile(dDir, updtStatusName);
				ASSERT(j # NIL, 100);
				lastBlock := SHORT(j(J.Object).fields[0].value(J.Integer).n);
				BA.SwitchOff(dDir, updtStatusName);
				BA.Collect;
			END;
			Services.DoLater(a, Services.Ticks() + action1Delay);
		END Do;
	
	PROCEDURE (a: Action2) Do;
		
		VAR
			
			s: ARRAY 11 OF CHAR;
		
		BEGIN (*Do*)
			IF lastBlock >= 0 THEN
				Strings.IntToString(lastBlock, s);
				Dialog.ShowParamStatus("#Duniter1:Updated", s, "", "");
			ELSE
				Dialog.ShowStatus("#Duniter1:NotUpdated");
			END;
			Services.DoLater(a, Services.Ticks() + action2Delay);
		END Do;
	
	PROCEDURE Stop;
		
		VAR
			
			loc: Files.Locator;
			f: Files.File;
			res: INTEGER;
		
		BEGIN (*Stop*)
			loc := Files.dir.This(""); ASSERT(loc.res = 0, 100);
			f := Files.dir.New(loc, Files.dontAsk); ASSERT(f # NIL, 101);
			f.Register(stopName, 'txt', Files.dontAsk, res); ASSERT(res = 0, 102);
		END Stop;
	
	PROCEDURE Start*;
		
		VAR
			
			a1: Action1;
			a2: Action2;
		
		BEGIN (*Start*)
			BA.SwitchOff(dDir, updtStatusName);
			UtilExternal.Start(cmdsPath);
			NEW(a1);
			Services.DoLater(a1, Services.now);
			NEW(a2);
			Services.DoLater(a2, Services.now);
		END Start;
		
	
	BEGIN (*Duniter1BlockchainPrint*)
		lastBlock := - 1;
	CLOSE
		Stop;
	END Duniter1BlockchainPrint.
