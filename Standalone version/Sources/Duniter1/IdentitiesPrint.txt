(* 
Duniter1: WotWizard.

Copyright (C) 2017 GérardMeunier

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  for more details.

You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*)

MODULE Duniter1IdentitiesPrint;
	
	

	IMPORT
		
		BA := Duniter1BasicPrint, B := Duniter1BlockchainPrint, GS := Duniter1GQLSender, Dialog, TextMappers, TextModels, TextViews, J := UtilJson, Views;
	
	CONST
		
		waitDelay = 100;
		
		revokedJson = "IdentitiesRevoked";
		missingJson = "IdentitiesMissing";
		membersJson = "IdentitiesMembers";
	
	TYPE
		
		 Action = POINTER TO RECORD (BA.WaitFor)
			title: Views.Title;
			nbMsg: Dialog.String;
		END;
		
		IncId* = RECORD
			identity*: B.Identity;
			time*: LONGINT;
		END;
		
		Identities* = POINTER TO RECORD
			by_pubkey*: POINTER TO ARRAY OF IncId;
			by_uid*: POINTER TO ARRAY OF IncId;
			block*: INTEGER;
			now*: LONGINT;
		END;
	
	VAR
		
		globalIds*: Identities;
		globalIncId*: IncId;
	
	PROCEDURE WaitFor (IN name: ARRAY OF CHAR; IN title, nbMsg: ARRAY OF CHAR);
		
		VAR
			
			a: Action;
		
		BEGIN (*WaitFor*)
			NEW(a);
			a.title := title$;
			a.nbMsg := nbMsg$;
			a.Do(BA.waitDir, name, waitDelay);
		END WaitFor;
	
	PROCEDURE Print (IN title, nbMsg: ARRAY OF CHAR);
		
		VAR
			
			t: TextModels.Model;
			f: TextMappers.Formatter;
			dt: BA.DateTime;
		
		PROCEDURE PrintIdsByPub (IN ids: ARRAY OF IncId);
			
			VAR
				
				i: INTEGER;
				id: B.Identity;
			
			BEGIN (*PrintIdsByPub*)
				FOR i := 0 TO LEN(ids) - 1 DO
					id := ids[i].identity;
					f.WriteString(id.pubkey); f.WriteTab;
					f.WriteString(id.uid); f.WriteLn; f.WriteTab;
					BA.TimestampToString(ids[i].time, dt);
					f.WriteString(dt);
					f.WriteLn;
				END;
			END PrintIdsByPub;
		
		PROCEDURE PrintIdsByUid (IN ids: ARRAY OF IncId);
			
			VAR
				
				i: INTEGER;
				id: B.Identity;
			
			BEGIN (*PrintIdsByUid*)
				FOR i := 0 TO LEN(ids) - 1 DO
					id := ids[i].identity;
					f.WriteString(id.uid); f.WriteTab;
					f.WriteString(id.pubkey); f.WriteLn; f.WriteTab;
					BA.TimestampToString(ids[i].time, dt);
					f.WriteString(dt);
					f.WriteLn;
				END;
			END PrintIdsByUid;
		
		BEGIN (*Print*)
			t := TextModels.dir.New();
			f.ConnectTo(t);
			f.WriteMsg("#Duniter1:Block");
			f.WriteString(" ");
			f.WriteInt(globalIds.block);
			f.WriteTab;
			BA.TimestampToString(globalIds.now, dt);
			f.WriteString(dt);
			f.WriteString(" (UTC+0)");
			f.WriteLn; f.WriteLn;
			f.WriteString(nbMsg);
			f.WriteString(" = ");
			IF globalIds.by_pubkey # NIL THEN
				f.WriteInt(LEN(globalIds.by_pubkey));
				f.WriteLn; f.WriteLn;
				PrintIdsByPub(globalIds.by_pubkey);
			ELSE
				f.WriteInt(0);
			END;
			f.WriteLn;
			IF globalIds.by_uid # NIL THEN
				PrintIdsByUid(globalIds.by_uid);
			END;
			Views.OpenAux(TextViews.dir.New(t), title$);
		END Print;
	
	PROCEDURE (a: Action) End (IN name: ARRAY OF CHAR);
		
		VAR
			
			j: J.Json;
		
		BEGIN (*End*)
			NEW(globalIds);
			j := J.ReadFile(BA.waitDir, name); ASSERT(j # NIL, 100);
			j.ApplyTo(globalIds);
			Print(a.title, a.nbMsg);
			globalIds := NIL;
		END End;
	
	PROCEDURE Revoked*;
		
		VAR
			
			title: Views.Title;
			nbMsg: Dialog.String;
		
		BEGIN (*Revoked*)
			BA.SwitchOff(BA.waitDir, revokedJson + ".json");
			GS.Send("Duniter1Identities", "Revoked", "", revokedJson);
			Dialog.MapString("#Duniter1:RevokedM", title);
			Dialog.MapString("#Duniter1:RevokedNb", nbMsg);
			WaitFor(revokedJson + ".json", title, nbMsg);
		END Revoked;
	
	PROCEDURE Missing*;
		
		VAR
			
			title: Views.Title;
			nbMsg: Dialog.String;
		
		BEGIN (*Missing*)
			BA.SwitchOff(BA.waitDir, missingJson + ".json");
			GS.Send("Duniter1Identities", "Missing", "", missingJson);
			Dialog.MapString("#Duniter1:Missing", title);
			Dialog.MapString("#Duniter1:MissingNb", nbMsg);
			WaitFor(missingJson + ".json", title, nbMsg);
		END Missing;
	
	PROCEDURE Members*;
		
		VAR
			
			title: Views.Title;
			nbMsg: Dialog.String;
		
		BEGIN (*Members*)
			BA.SwitchOff(BA.waitDir, membersJson + ".json");
			GS.Send("Duniter1Identities", "Members", "", membersJson);
			Dialog.MapString("#Duniter1:Identities", title);
			Dialog.MapString("#Duniter1:MembersNb", nbMsg);
			WaitFor(membersJson + ".json", title, nbMsg);
		END Members;
	
	END Duniter1IdentitiesPrint.

Duniter1IdentitiesPrint.Revoked;

Duniter1IdentitiesPrint.Missing;

Duniter1IdentitiesPrint.Members;
