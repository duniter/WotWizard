(* 
Duniter1: WotWizard.

Copyright (C) 2017 GérardMeunier

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  for more details.

You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*)

MODULE Duniter1QualitiesPrint;
	
	
	
	(* Print qualities *)

	IMPORT
		
		BA := Duniter1BasicPrint, GS := Duniter1GQLSender, Dialog, HermesAxes, HermesScat, HermesUtil, HermesViews, Ports, TextMappers, TextModels, TextViews, J := UtilJson, Views;
	
	CONST
		
		waitDelay = 100;
		
		distancesJson = "Distances";
		qualitiesJson = "Qualities";
	
	TYPE
		
		 Action = POINTER TO RECORD (BA.WaitFor)
			dist: BOOLEAN;
		END;
	
		PropOfSentries* = RECORD
			id*: BA.String;
			prop*: REAL;
		END;
		
		Props* = POINTER TO ARRAY OF PropOfSentries;
		
		PropsPtr* = POINTER TO RECORD
			values*,
			values_byId*: Props;
			block*: INTEGER;
			now*: LONGINT;
		END;
	
	VAR
		
		globalProps*: PropsPtr;
	
	PROCEDURE Print (dist: BOOLEAN; props, propsId: Props; block: INTEGER; now: LONGINT);
		
		CONST
			
			scatColor = Ports.red;
			scatShape = HermesScat.point;
		
		VAR
			
			i, m: INTEGER;
			s: Views.Title;
			axe: ARRAY 2 OF CHAR;
			t: TextModels.Model;
			f: TextMappers.Formatter;
			p: HermesViews.View;
			ts: POINTER TO ARRAY OF HermesUtil.Dot;
			tr: HermesViews.Trace;
			dt: BA.DateTime;
		
		BEGIN (*Print*)
			t := TextModels.dir.New();
			f.ConnectTo(t);
			f.WriteMsg("#Duniter1:Block");
			f.WriteString(" ");
			f.WriteInt(block);
			f.WriteTab;
			BA.TimestampToString(now, dt);
			f.WriteString(dt);
			f.WriteString(" (UTC+0)");
			f.WriteLn; f.WriteLn;
			IF dist THEN
				Dialog.MapString("#Duniter1:Distances", s);
				axe := "d"
			ELSE
				Dialog.MapString("#Duniter1:Qualities", s);
				axe := "q";
			END;
			Views.OpenAux(TextViews.dir.New(t), s);
			IF props # NIL THEN
				m := LEN(props);
				FOR i := 0 TO m - 1 DO
					f.WriteTab;
					f.WriteInt(i + 1);
					f.WriteTab;
					f.WriteRealForm(100. * props[i].prop, 16, 6, - 2, '');
					f.WriteTab;
					f.WriteString(props[i].id);
					f.WriteLn;
				END;
				f.WriteLn;
				FOR i := 0 TO m - 1 DO
					f.WriteTab;
					f.WriteString(propsId[i].id);
					f.WriteTab;
					f.WriteRealForm(100. * propsId[i].prop, 16, 6, - 2, '');
					f.WriteLn;
				END;
				p := HermesViews.New();
				NEW(ts, m);
				FOR i := 0 TO m - 1 DO
					ts[i].x := i;
					ts[i].y := 100. * props[i].prop;
				END;
				tr := HermesScat.Insert(p, ts, scatShape, FALSE, FALSE, FALSE);
				tr.ChangeColor(scatColor);
				tr := HermesAxes.Insert(p, FALSE, TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, 'n', '', 0, 3);
				tr := HermesAxes.Insert(p, TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, axe, '%', 0, 3);
				p.FixY(0., 100.);
				Views.OpenAux(p, s);
			END;
		END Print;
	
	PROCEDURE (a: Action) End (IN name: ARRAY OF CHAR);
		
		VAR
			
			j: J.Json;
		
		BEGIN (*End*)
			j := J.ReadFile(BA.waitDir, name); ASSERT(j # NIL, 100);
			NEW(globalProps);
			j.ApplyTo(globalProps);
			Print(a.dist, globalProps.values, globalProps.values_byId, globalProps.block, globalProps.now);
			globalProps := NIL;
		END End;
	
	PROCEDURE PrintDist*;
		
		VAR
			
			a: Action;
		
		BEGIN (*PrintDist*)
			BA.SwitchOff(BA.waitDir, distancesJson + ".json");
			GS.Send("Duniter1Qualities", "Distances", "", distancesJson);
			NEW(a);
			a.dist := TRUE;
			a.Do(BA.waitDir, distancesJson + ".json", waitDelay);
		END PrintDist;
	
	PROCEDURE PrintQual*;
		
		VAR
			
			a: Action;
		
		BEGIN (*PrintQual*)
			BA.SwitchOff(BA.waitDir, qualitiesJson + ".json");
			GS.Send("Duniter1Qualities", "Qualities", "", qualitiesJson);
			NEW(a);
			a.dist := FALSE;
			a.Do(BA.waitDir, qualitiesJson + ".json", waitDelay);
		END PrintQual;
	
	END Duniter1QualitiesPrint.
