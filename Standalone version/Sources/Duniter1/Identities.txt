(* 
Duniter1: WotWizard.

Copyright (C) 2017 GérardMeunier

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  for more details.

You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*)

MODULE Duniter1Identities;
	
	

	IMPORT
		
		B := Duniter1Blockchain, BA := Duniter1Basic, TextMappers, TextModels, TextViews, J := UtilJson;
	
	CONST
		
		revokedAction = 0;
		missingAction = 1;
		membersAction = 2;
	
	TYPE
		
		Filter = PROCEDURE (id: B.Identity): BOOLEAN;
		
		Action = POINTER TO RECORD (B.Action)
			what: INTEGER;
			output: BA.String;
		END;
	
	VAR
		
		globalId-: B.Identity;
	
	PROCEDURE List (f: Filter): J.Json;
		
		VAR
			
			ok, b: BOOLEAN;
			pubkey: B.Pubkey;
			mt, t: LONGINT;
			uid: B.String;
		
		BEGIN (*List*)
			J.StartObject;
			J.StartArray;
			ok := B.IdNextPubkey(TRUE, pubkey);
			WHILE ok DO
				globalId := B.IdPubId(pubkey); ASSERT(globalId # NIL, 100);
				IF f(globalId) THEN
					J.StartObject;
					J.PushJson(J.BuildJsonFrom(globalId));
					J.BuildField("identity");
					b := B.TimeOf(globalId.block_number, mt, t); ASSERT(b, 102);
					J.PushInteger(mt);
					J.BuildField("time");
					J.BuildObject;
				END;
				ok := B.IdNextPubkey(FALSE, pubkey);
			END;
			J.BuildArray;
			J.BuildField("by_pubkey");
			J.StartArray;
			ok := B.IdNextUid(TRUE, uid);
			WHILE ok DO
				globalId := B.IdUidId(uid); ASSERT(globalId # NIL, 103);
				IF f(globalId) THEN
					J.StartObject;
					J.PushJson(J.BuildJsonFrom(globalId));
					J.BuildField("identity");
					b := B.TimeOf(globalId.block_number, mt, t); ASSERT(b, 105);
					J.PushInteger(mt);
					J.BuildField("time");
					J.BuildObject;
				END;
				ok := B.IdNextUid(FALSE, uid);
			END;
			J.BuildArray;
			J.BuildField("by_uid");
			J.PushInteger(B.LastBlock());
			J.BuildField("block");
			mt := B.Now();
			J.PushInteger(mt);
			J.BuildField("now");
			J.BuildObject;
			RETURN J.GetJson();
		END List;
	
	PROCEDURE Json (j: J.Json; IN name: ARRAY OF CHAR);
		
		VAR
			
			t: TextModels.Model;
			f: TextMappers.Formatter;
		
		BEGIN (*Json*)
			t := TextModels.dir.New();
			f.ConnectTo(t);
			j.Write(f);
			BA.VRegister(TextViews.dir.New(t), BA.waitLoc, name$, 100, "Identities.Json");
		END Json;
	
	PROCEDURE FilterRevoked (id: B.Identity): BOOLEAN;
		
		BEGIN (*FilterRevoked*)
			RETURN id.expires_on = BA.revoked;
		END FilterRevoked;
	
	PROCEDURE FilterMissing (id: B.Identity): BOOLEAN;
		
		BEGIN (*FilterMissing*)
			RETURN ~id.member & (id.expires_on # BA.revoked);
		END FilterMissing;
	
	PROCEDURE FilterMembers (id: B.Identity): BOOLEAN;
		
		BEGIN (*FilterMembers*)
			RETURN id.member;
		END FilterMembers;
	
	PROCEDURE (a: Action) Activate;
		
		BEGIN (*Activate*)
			CASE a.what OF
				|revokedAction:
					Json(List(FilterRevoked), a.output);
				|missingAction:
					Json(List(FilterMissing), a.output);
				|membersAction:
					Json(List(FilterMembers), a.output);
			END;
		END Activate;
	
	PROCEDURE Ask (IN output: ARRAY OF CHAR; what: INTEGER);
		
		VAR
			
			a: Action;
		
		BEGIN (*Ask*)
			NEW(a);
			a.what := what;
			NEW(a.output, LEN(output$) + 1); a.output^ := output$;
			B.AddAction(a);
		END Ask;
	
	PROCEDURE Revoked* (IN output: ARRAY OF CHAR);
		
		BEGIN (*Revoked*)
			Ask(output, revokedAction);
		END Revoked;
	
	PROCEDURE Missing* (IN output: ARRAY OF CHAR);
		
		BEGIN (*Missing*)
			Ask(output, missingAction);
		END Missing;
	
	PROCEDURE Members* (IN output: ARRAY OF CHAR);
		
		BEGIN (*Members*)
			Ask(output, membersAction);
		END Members;
	
	END Duniter1Identities.

Duniter1Identities.Revoked;

Duniter1Identities.Missing;

Duniter1Identities.Members;
