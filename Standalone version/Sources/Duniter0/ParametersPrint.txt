(* 
Duniter0: WotWizard.

Copyright (C) 2017 GérardMeunier

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  for more details.

You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*)

MODULE Duniter0ParametersPrint;
	
	

	IMPORT
		
		B := Duniter0Blockchain, BA := Duniter0Basic, Dialog, TextMappers, TextModels, TextViews, Views;
	
	CONST
		
		min = 60;
		hour = 60 * min;
		day = 24 * hour;
		year = 365 * day + day DIV 4;
		month = year DIV 12;
	
	TYPE
		
		TName = ARRAY 20 OF CHAR;
	
	VAR
		
		times : ARRAY 5 OF INTEGER;
		tNames : ARRAY 6 OF TName;
	
	PROCEDURE Norm (t: INTEGER; OUT tN: INTEGER; OUT tName: ARRAY OF CHAR);
		
		VAR
			
			i: INTEGER;
		
		BEGIN (*Norm*)
			i := 4;
			WHILE t < times[i] DO
				DEC(i);
			END;
			IF i >= 0 THEN
				tN := t DIV times[i];
			END;
			tName := tNames[i + 1]$;
		END Norm;
	
	PROCEDURE Do*;
		
		VAR
			
			t: TextModels.Model;
			f: TextMappers.Formatter;
			s: Views.Title;
			tN: INTEGER;
			tName: TName;
			dt: BA.DateTime;
		
		BEGIN (*Do*)
			t := TextModels.dir.New();
			f.ConnectTo(t);
			
			f.WriteMsg("#Duniter0:c"); f.WriteLn;
			f.WriteString("c = "); f.WriteReal(B.pars.c);
			Norm(B.pars.dtReeval, tN, tName);
			f.WriteString(" ("); f.WriteReal(100 * B.pars.c); f.WriteString("% / ("); f.WriteInt(tN); f.WriteString(" " + tName + "))");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:dt"); f.WriteLn;
			f.WriteString("dt = "); f.WriteInt(B.pars.dt);
			Norm(B.pars.dt, tN, tName);
			f.WriteString(" ("); f.WriteInt(tN); f.WriteString(" " + tName + ")");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:ud0"); f.WriteLn;
			f.WriteString("ud0 = "); f.WriteInt(B.pars.ud0);
			f.WriteString(" ("); f.WriteReal(B.pars.ud0 / 100); f.WriteString(" Ğ1)");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:sigPeriod"); f.WriteLn;
			f.WriteString("sigPeriod = "); f.WriteInt(B.pars.sigPeriod);
			Norm(B.pars.sigPeriod, tN, tName);
			f.WriteString(" ("); f.WriteInt(tN); f.WriteString(" " + tName + ")");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:sigStock"); f.WriteLn;
			f.WriteString("sigStock = "); f.WriteInt(B.pars.sigStock);
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:sigWindow"); f.WriteLn;
			f.WriteString("sigWindow = "); f.WriteInt(B.pars.sigWindow);
			Norm(B.pars.sigWindow, tN, tName);
			f.WriteString(" ("); f.WriteInt(tN); f.WriteString(" " + tName + ")");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:sigValidity"); f.WriteLn;
			f.WriteString("sigValidity = "); f.WriteInt(B.pars.sigValidity);
			Norm(B.pars.sigValidity, tN, tName);
			f.WriteString(" ("); f.WriteInt(tN); f.WriteString(" " + tName + ")");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:sigQty"); f.WriteLn;
			f.WriteString("sigQty = "); f.WriteInt(B.pars.sigQty);
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:idtyWindow"); f.WriteLn;
			f.WriteString("idtyWindow = "); f.WriteInt(B.pars.idtyWindow);
			Norm(B.pars.idtyWindow, tN, tName);
			f.WriteString(" ("); f.WriteInt(tN); f.WriteString(" " + tName + ")");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:msWindow"); f.WriteLn;
			f.WriteString("msWindow = "); f.WriteInt(B.pars.msWindow);
			Norm(B.pars.msWindow, tN, tName);
			f.WriteString(" ("); f.WriteInt(tN); f.WriteString(" " + tName + ")");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:msPeriod"); f.WriteLn;
			f.WriteString("msPeriod = "); f.WriteInt(B.pars.msPeriod);
			Norm(B.pars.msPeriod, tN, tName);
			f.WriteString(" ("); f.WriteInt(tN); f.WriteString(" " + tName + ")");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:xpercent"); f.WriteLn;
			f.WriteString("xpercent = "); f.WriteReal(B.pars.xpercent);
			f.WriteString(" ("); f.WriteReal(100 * B.pars.xpercent); f.WriteString("%)");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:msValidity"); f.WriteLn;
			f.WriteString("msValidity = "); f.WriteInt(B.pars.msValidity);
			Norm(B.pars.msValidity, tN, tName);
			f.WriteString(" ("); f.WriteInt(tN); f.WriteString(" " + tName + ")");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:stepMax"); f.WriteLn;
			f.WriteString("stepMax = "); f.WriteInt(B.pars.stepMax);
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:medianTimeBlocks"); f.WriteLn;
			f.WriteString("medianTimeBlocks = "); f.WriteInt(B.pars.medianTimeBlocks);
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:avgGenTime"); f.WriteLn;
			f.WriteString("avgGenTime = "); f.WriteInt(B.pars.avgGenTime);
			Norm(B.pars.avgGenTime, tN, tName);
			f.WriteString(" ("); f.WriteInt(tN); f.WriteString(" " + tName + ")");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:dtDiffEval"); f.WriteLn;
			f.WriteString("dtDiffEval = "); f.WriteInt(B.pars.dtDiffEval);
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:percentRot"); f.WriteLn;
			f.WriteString("percentRot = "); f.WriteReal(B.pars.percentRot);
			f.WriteString(" ("); f.WriteReal(100 * B.pars.percentRot); f.WriteString("%)");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:udTime0"); f.WriteLn;
			f.WriteString("udTime0 = "); f.WriteInt(B.pars.udTime0);
			BA.TimestampToString(B.pars.udTime0, dt);
			f.WriteString(" (" + dt + " UTC+0)");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:udReevalTime0"); f.WriteLn;
			f.WriteString("udReevalTime0 = "); f.WriteInt(B.pars.udReevalTime0);
			BA.TimestampToString(B.pars.udReevalTime0, dt);
			f.WriteString(" (" + dt + " UTC+0)");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:dtReeval"); f.WriteLn;
			f.WriteString("dtReeval = "); f.WriteInt(B.pars.dtReeval);
			Norm(B.pars.dtReeval, tN, tName);
			f.WriteString(" ("); f.WriteInt(tN); f.WriteString(" " + tName + ")");
			
			f.WriteLn; f.WriteLn;
			
			f.WriteMsg("#Duniter0:txWindow"); f.WriteLn;
			f.WriteString("txWindow = "); f.WriteInt(B.pars.txWindow);
			Norm(B.pars.txWindow, tN, tName);
			f.WriteString(" ("); f.WriteInt(tN); f.WriteString(" " + tName + ")");
			
			Dialog.MapString("#Duniter0:Parameters", s);
			Views.OpenAux(TextViews.dir.New(t), s);
		END Do;
	
	PROCEDURE Init;
		
		BEGIN (*Init*)
			times[0] := min;
			times[1] := hour;
			times[2] := day;
			times[3] := month;
			times[4] := year;
			Dialog.MapString("#Duniter0:second", tNames[0]);
			Dialog.MapString("#Duniter0:minute", tNames[1]);
			Dialog.MapString("#Duniter0:hour", tNames[2]);
			Dialog.MapString("#Duniter0:day", tNames[3]);
			Dialog.MapString("#Duniter0:month", tNames[4]);
			Dialog.MapString("#Duniter0:year", tNames[5]);
		END Init;
	
	BEGIN (*Duniter0ParametersPrint*)
		Init;
	END Duniter0ParametersPrint.Do;
