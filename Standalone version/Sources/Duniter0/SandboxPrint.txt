(* 
Duniter0: WotWizard.

Copyright (C) 2017 GérardMeunier

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  for more details.

You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*)

MODULE Duniter0SandboxPrint;
	
	

	IMPORT
		
		B := Duniter0Blockchain, BA := Duniter0Basic, S := Duniter0Sandbox, Dialog, TextMappers, TextModels, TextViews, Views;
	
	PROCEDURE Print*;
		
		VAR
			
			hash, toHash: S.Hash;
			uid: S.String;
			pubkey, from, to: S.Pubkey;
			exp: LONGINT;
			ok, okP, b, inBC: BOOLEAN;
			pos: S.CertPos;
			s: BA.DateTime;
			ss: Views.Title;
			t: TextModels.Model;
			f: TextMappers.Formatter;
		
		BEGIN (*Print*)
			t := TextModels.dir.New();
			f.ConnectTo(t);
			
			ok := S.IdNextHash(TRUE, hash);
			WHILE ok DO
				b := S.IdHash(hash, inBC, pubkey, uid, exp); ASSERT(b, 100);
				f.WriteString(hash); f.WriteLn;
				f.WriteTab;
				IF inBC THEN
					f.WriteMsg("#Duniter0:WasMember");
				ELSE
					f.WriteMsg("#Duniter0:Newcomer");
				END;
				f.WriteLn;
				f.WriteTab; f.WriteString(pubkey); f.WriteLn;
				f.WriteTab; f.WriteString(uid); f.WriteTab;
				BA.TimestampToString(exp, s);
				f.WriteString(s); f.WriteLn;
				ok := S.IdNextHash(FALSE, hash);
			END;
			f.WriteLn;
			ok := S.IdNextPubkey(TRUE, pubkey, hash);
			WHILE ok DO
				f.WriteString(pubkey); f.WriteLn; f.WriteTab;
				f.WriteString(hash);
				f.WriteLn;
				ok := S.IdNextPubkey(FALSE, pubkey, hash);
			END;
			f.WriteLn;
			ok := S.IdNextUid(TRUE, uid, hash);
			WHILE ok DO
				f.WriteString(uid); f.WriteLn; f.WriteTab;
				f.WriteString(hash);
				f.WriteLn;
				ok := S.IdNextUid(FALSE, uid, hash);
			END;
			f.WriteLn;
			
			ok := S.CertNextFrom(TRUE, pos);
			WHILE ok DO
				okP := pos.CertNextPos(from, toHash);
				WHILE okP DO
					f.WriteString(from);
					IF B.IdPub(from, uid) THEN
						f.WriteLn; f.WriteTab;
						f.WriteString(" ("); f.WriteString(uid); f.WriteString(")");
					END;
					f.WriteLn; f.WriteString("→"); f.WriteLn;
					f.WriteString(toHash);
					IF S.IdHash(toHash, inBC, pubkey, uid, exp) OR S.Cert(from, toHash, to, exp) & B.IdPub(to, uid) THEN
						f.WriteLn; f.WriteTab;
						f.WriteString(" ("); f.WriteString(uid); f.WriteString(") ");
					END;
					b := S.Cert(from, toHash, to, exp); ASSERT(b, 101);
					BA.TimestampToString(exp, s);
					f.WriteLn;
					f.WriteString(s);
					f.WriteLn; f.WriteLn;
					okP := pos.CertNextPos(from, toHash);
				END;
				ok := S.CertNextFrom(FALSE, pos);
			END;
			f.WriteLn;
			ok := S.CertNextTo(TRUE, pos);
			WHILE ok DO
				okP := pos.CertNextPos(from, toHash);
				WHILE okP DO
					f.WriteString(toHash);
					IF S.IdHash(toHash, inBC, to, uid, exp) OR S.Cert(from, toHash, to, exp) & B.IdPub(to, uid) THEN
						f.WriteLn; f.WriteTab;
						f.WriteString(" ("); f.WriteString(uid); f.WriteString(")");
					END;
					f.WriteLn; f.WriteString("←"); f.WriteLn;
					f.WriteString(from);
					IF B.IdPub(from, uid) THEN
						f.WriteLn; f.WriteTab;
						f.WriteString(" ("); f.WriteString(uid); f.WriteString(") ");
					END;
					b := S.Cert(from, toHash, to, exp); ASSERT(b, 102);
					BA.TimestampToString(exp, s);
					f.WriteLn;
					f.WriteString(s);
					f.WriteLn; f.WriteLn;
					okP := pos.CertNextPos(from, toHash);
				END;
				ok := S.CertNextTo(FALSE, pos);
			END;
			
			Dialog.MapString("#Duniter0:Sandbox", ss);
			Views.OpenAux(TextViews.dir.New(t), ss);
		END Print;
	
	END Duniter0SandboxPrint.

Duniter0SandboxPrint.Print;