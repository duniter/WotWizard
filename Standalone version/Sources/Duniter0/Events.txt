(* 
Duniter0: WotWizard.

Copyright (C) 2017 GérardMeunier

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  for more details.

You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*)

MODULE Duniter0Events;
	
	

	IMPORT
		
		A := UtilAvlTree, B := Duniter0Blockchain, BA := Duniter0Basic, J := UtilJson, S := UtilSort, L := StdLog, Dialog, Services, TextMappers, TextModels, TextViews, Views;
	
	TYPE
		
		Membership = POINTER TO EXTENSIBLE RECORD
			id: B.String;
			exp: LONGINT;
			expS: BA.DateTime;
		END;
		
		Memberships = POINTER TO ARRAY OF Membership;
		
		CertifEnd = POINTER TO RECORD (Membership)
			criticalCertifier: B.String;
		END;
		
		MemSort = RECORD (S.T)
			m: Memberships;
		END;
		
		Certif = POINTER TO RECORD (A.Elem)
			from: B.String;
			exp: LONGINT;
		END;
	
	PROCEDURE (VAR ms: MemSort) Less (m1, m2: INTEGER): BOOLEAN;
		
		BEGIN (*Less*)
			RETURN (ABS(ms.m[m1].exp) < ABS(ms.m[m2].exp)) OR (ABS(ms.m[m1].exp) = ABS(ms.m[m2].exp)) & (BA.CompP(ms.m[m1].id, ms.m[m2].id) = BA.lt);
		END Less;
	
	PROCEDURE (VAR ms: MemSort) Swap (m1, m2: INTEGER);
		
		VAR
			
			m: Membership;
		
		BEGIN (*Swap*)
			m := ms.m[m1]; ms.m[m1] := ms.m[m2]; ms.m[m2] := m;
		END Swap;
	
	PROCEDURE (c1: Certif) Compare (c2: A.Elem): BYTE;
		
		BEGIN (*Compare*)
			WITH c2: Certif DO
				IF c1.exp < c2.exp THEN
					RETURN A.lt;
				END;
				IF c1.exp > c2.exp THEN
					RETURN A.gt;
				END;
				IF c1.from$ < c2.from$ THEN
					RETURN A.lt;
				END;
				IF c1.from$ > c2.from$ THEN
					RETURN A.gt;
				END;
				RETURN A.eq;
			END;
		END Compare;
	
	PROCEDURE MembershipsEnds (): Memberships;
		
		VAR
			
			ms: MemSort;
			ok, mem, b: BOOLEAN;
			id: B.String;
			p: B.Pubkey;
			h: B.Hash;
			bnb, i: INTEGER;
			exp, app: LONGINT;
		
		BEGIN (*MembershipsEnds*)
			NEW(ms.m, B.IdLenM());
			i := 0;
			ok := B.IdNextUidM(TRUE, id);
			WHILE ok DO
				b := B.IdUidComplete(id, p, mem, h, bnb, app, exp); ASSERT(b & mem, 100);
				NEW(ms.m[i]);
				ms.m[i].id := id; ms.m[i].exp := exp; BA.TimestampToString(exp, ms.m[i].expS);
				INC(i);
				ok := B.IdNextUidM(FALSE, id);
			END;
			ms.QuickSort(0, LEN(ms.m) - 1);
			RETURN ms.m;
		END MembershipsEnds;
	
	PROCEDURE MissingEnds (): Memberships;
		
		VAR
			
			ms: MemSort;
			ok, mem, b: BOOLEAN;
			id: B.String;
			p: B.Pubkey;
			h: B.Hash;
			bnb, i: INTEGER;
			exp, app: LONGINT;
		
		BEGIN (*MissingEnds*)
			i := 0;
			ok := B.IdNextUid(TRUE, id);
			WHILE ok DO
				b := B.IdUidComplete(id, p, mem, h, bnb, app, exp); ASSERT(b, 100);
				IF ~mem & (exp # BA.revoked) THEN
					INC(i);
				END;
				ok := B.IdNextUid(FALSE, id);
			END;
			NEW(ms.m, i);
			i := 0;
			ok := B.IdNextUid(TRUE, id);
			WHILE ok DO
				b := B.IdUidComplete(id, p, mem, h, bnb, app, exp); ASSERT(b, 101);
				IF ~mem & (exp # BA.revoked) THEN
					NEW(ms.m[i]);
					ms.m[i].id := id; ms.m[i].exp := exp; BA.TimestampToString(exp, ms.m[i].expS);
					INC(i);
				END;
				ok := B.IdNextUid(FALSE, id);
			END;
			ms.QuickSort(0, LEN(ms.m) - 1);
			RETURN ms.m;
		END MissingEnds;
	
	PROCEDURE CertifsEnds (): Memberships;
		
		VAR
			
			ms: MemSort;
			ok, b: BOOLEAN;
			id: B.String;
			p, from, to: B.Pubkey;
			bnb, i, n: INTEGER;
			pos: B.CertPos;
			cT: A.Tree;
			c: Certif;
			e: A.Elem;
			cE: CertifEnd;
		
		BEGIN (*CertifsEnds*)
			NEW(ms.m, B.IdLenM());
			i := 0;
			ok := B.IdNextUidM(TRUE, id);
			WHILE ok DO
				b := B.IdUid(id, p); ASSERT(b, 100);
				A.New(cT);
				ok := B.CertTo(p, pos) & pos.CertNextPos(from, to);
				WHILE ok DO
					NEW(c);
					b := B.IdPub(from, c.from); ASSERT(b, 101);
					b := B.Cert(from, to, bnb, c.exp); ASSERT(b, 102);
					e := c;
					b := cT.SearchIns(e, n); ASSERT(~b, 103);
					ok := pos.CertNextPos(from, to);
				END;
				NEW(cE);
				ms.m[i] := cE;
				cT.Find(cT.NumberOfElems() - B.pars.sigQty + 1, e); ASSERT(e # NIL, 104);
				WITH e: Certif DO
					cE.exp := e.exp; cE.criticalCertifier := e.from;
				END;
				cE.id := id; BA.TimestampToString(cE.exp, cE.expS);
				INC(i);
				ok := B.IdNextUidM(FALSE, id);
			END;
			ms.QuickSort(0, LEN(ms.m) - 1);
			RETURN ms.m;
		END CertifsEnds;
	
	PROCEDURE PrintMembershipsEnds*;
		
		VAR
			
			ms: Memberships;
			i, j, m, l: INTEGER;
			time: LONGINT;
			s: Views.Title;
			ss: BA.DateTime;
			t: TextModels.Model;
			f: TextMappers.Formatter;
		
		BEGIN (*PrintMembershipsEnds*)
			t := TextModels.dir.New();
			f.ConnectTo(t);
			Dialog.MapString("#Duniter0:LimitsM", s);
			f.WriteString(s);
			f.WriteLn; f.WriteLn;
			time := B.Now();
			BA.TimestampToString(time, ss);
			l := LEN(ss$);
			f.WriteString(ss);
			f.WriteString(" (UTC+0)");
			f.WriteLn; f.WriteLn;
			time := Services.Ticks();
			ms := MembershipsEnds();
			L.Int(Services.Ticks() - time);
			L.Ln;
			m := LEN(ms);
			FOR i := 0 TO m - 1 DO
				f.WriteString('    ');
				f.WriteString(ms[i].expS);
				FOR j := LEN(ms[i].expS$) TO l DO
					f.WriteString(" ");
				END;
				f.WriteString('    ');
				f.WriteString(ms[i].id);
				f.WriteLn;
			END;
			Views.OpenAux(TextViews.dir.New(t), s);
		END PrintMembershipsEnds;
	
	PROCEDURE JsonMembershipsEnds (): J.Json;
		
		VAR
			
			ms: Memberships;
			i, m: INTEGER;
			time: LONGINT;
			ss: BA.DateTime;
		
		BEGIN (*JsonMembershipsEnds*)
			J.StartObject;
			J.PushString("Membership_Limits");
			J.BuildField("description");
			J.PushInteger(B.LastBlock());
			J.BuildField("block");
			time := B.Now();
			J.PushInteger(time);
			J.BuildField("date_integer");
			BA.TimestampToString(time, ss);
			J.PushString(ss + " (UTC+0)");
			J.BuildField("date_string");
			J.StartArray;
			ms := MembershipsEnds();
			m := LEN(ms);
			FOR i := 0 TO m - 1 DO
				J.StartObject;
				J.PushInteger(ms[i].exp);
				J.BuildField("limit_integer");
				J.PushString(ms[i].expS);
				J.BuildField("limit_string");
				J.PushString(ms[i].id);
				J.BuildField("uid");
				J.BuildObject;
			END;
			J.BuildArray;
			J.BuildField("limits");
			J.BuildObject;
			RETURN J.GetJson();
		END JsonMembershipsEnds;
	
	PROCEDURE JsonMembershipsEndsText (): TextViews.View;
		
		VAR
			
			t: TextModels.Model;
			f: TextMappers.Formatter;
		
		BEGIN (*JsonMembershipsEndsText*)
			t := TextModels.dir.New();
			f.ConnectTo(t);
			JsonMembershipsEnds().Write(f);
			RETURN TextViews.dir.New(t);
		END JsonMembershipsEndsText;
	
	PROCEDURE JsonMembershipsEndsPrint*;
		
		VAR
			
			s: Views.Title;
		
		BEGIN (*JsonMembershipsEndsPrint*)
			Dialog.MapString("#Duniter0:LimitsM", s);
			Views.OpenAux(JsonMembershipsEndsText(), s);
		END JsonMembershipsEndsPrint;
	
	PROCEDURE PrintMissingEnds*;
		
		VAR
			
			ms: Memberships;
			i, j, m, l: INTEGER;
			time: LONGINT;
			s: Views.Title;
			ss: BA.DateTime;
			t: TextModels.Model;
			f: TextMappers.Formatter;
		
		BEGIN (*PrintMissingEnds*)
			t := TextModels.dir.New();
			f.ConnectTo(t);
			Dialog.MapString("#Duniter0:LimitsMissing", s);
			f.WriteString(s);
			f.WriteLn; f.WriteLn;
			time := B.Now();
			BA.TimestampToString(time, ss);
			l := LEN(ss$);
			f.WriteString(ss);
			f.WriteString(" (UTC+0)");
			f.WriteLn; f.WriteLn;
			time := Services.Ticks();
			ms := MissingEnds();
			L.Int(Services.Ticks() - time);
			L.Ln;
			m := LEN(ms);
			FOR i := 0 TO m - 1 DO
				f.WriteString('    ');
				f.WriteString(ms[i].expS);
				FOR j := LEN(ms[i].expS$) TO l DO
					f.WriteString(" ");
				END;
				f.WriteString('    ');
				f.WriteString(ms[i].id);
				f.WriteLn;
			END;
			Views.OpenAux(TextViews.dir.New(t), s);
		END PrintMissingEnds;
	
	PROCEDURE JsonMissingEnds (): J.Json;
		
		VAR
			
			ms: Memberships;
			i, m: INTEGER;
			time: LONGINT;
			ss: BA.DateTime;
		
		BEGIN (*JsonMissingEnds*)
			J.StartObject;
			J.PushString("Missing_Membership_Limits");
			J.BuildField("description");
			J.PushInteger(B.LastBlock());
			J.BuildField("block");
			time := B.Now();
			J.PushInteger(time);
			J.BuildField("date_integer");
			BA.TimestampToString(time, ss);
			J.PushString(ss + " (UTC+0)");
			J.BuildField("date_string");
			J.StartArray;
			ms := MissingEnds();
			m := LEN(ms);
			FOR i := 0 TO m - 1 DO
				J.StartObject;
				J.PushInteger(ms[i].exp);
				J.BuildField("limit_integer");
				J.PushString(ms[i].expS);
				J.BuildField("limit_string");
				J.PushString(ms[i].id);
				J.BuildField("uid");
				J.BuildObject;
			END;
			J.BuildArray;
			J.BuildField("limits");
			J.BuildObject;
			RETURN J.GetJson();
		END JsonMissingEnds;
	
	PROCEDURE JsonMissingEndsText (): TextViews.View;
		
		VAR
			
			t: TextModels.Model;
			f: TextMappers.Formatter;
		
		BEGIN (*JsonMissingEndsText*)
			t := TextModels.dir.New();
			f.ConnectTo(t);
			JsonMissingEnds().Write(f);
			RETURN TextViews.dir.New(t);
		END JsonMissingEndsText;
	
	PROCEDURE JsonMissingEndsPrint*;
		
		VAR
			
			s: Views.Title;
		
		BEGIN (*JsonMissingEndsPrint*)
			Dialog.MapString("#Duniter0:LimitsMissing", s);
			Views.OpenAux(JsonMissingEndsText(), s);
		END JsonMissingEndsPrint;
	
	PROCEDURE PrintCertifsEnds*;
		
		VAR
			
			ms: Memberships;
			i, j, m, l: INTEGER;
			time: LONGINT;
			s: Views.Title;
			ss: BA.DateTime;
			t: TextModels.Model;
			f: TextMappers.Formatter;
		
		BEGIN (*PrintCertifsEnds*)
			t := TextModels.dir.New();
			f.ConnectTo(t);
			Dialog.MapString("#Duniter0:LimitsC", s);
			f.WriteString(s);
			f.WriteLn; f.WriteLn;
			time := B.Now();
			BA.TimestampToString(time, ss);
			l := LEN(ss$);
			f.WriteString(ss);
			f.WriteString(" (UTC+0)");
			f.WriteLn; f.WriteLn;
			time := Services.Ticks();
			ms := CertifsEnds();
			L.Int(Services.Ticks() - time);
			L.Ln;
			m := LEN(ms);
			FOR i := 0 TO m - 1 DO
				f.WriteString('    ');
				f.WriteString(ms[i].expS);
				FOR j := LEN(ms[i].expS$) TO l DO
					f.WriteString(" ");
				END;
				f.WriteString('    ');
				f.WriteString(ms[i].id);
				(*
				f.WriteString('    (');
				f.WriteString(ms[i](CertifEnd).criticalCertifier);
				f.WriteString(")");
				*)
				f.WriteLn;
			END;
			Views.OpenAux(TextViews.dir.New(t), s);
		END PrintCertifsEnds;
	
	PROCEDURE JsonCertifsEnds (): J.Json;
		
		VAR
			
			ms: Memberships;
			i, m: INTEGER;
			time: LONGINT;
			ss: BA.DateTime;
		
		BEGIN (*JsonCertifsEnds*)
			J.StartObject;
			J.PushString("Certifications_Limits");
			J.BuildField("description");
			J.PushInteger(B.LastBlock());
			J.BuildField("block");
			time := B.Now();
			J.PushInteger(time);
			J.BuildField("date_integer");
			BA.TimestampToString(time, ss);
			J.PushString(ss + " (UTC+0)");
			J.BuildField("date_string");
			J.StartArray;
			ms := CertifsEnds();
			m := LEN(ms);
			FOR i := 0 TO m - 1 DO
				J.StartObject;
				J.PushInteger(ms[i].exp);
				J.BuildField("limit_integer");
				J.PushString(ms[i].expS);
				J.BuildField("limit_string");
				J.PushString(ms[i].id);
				J.BuildField("uid");
				J.PushString(ms[i](CertifEnd).criticalCertifier);
				J.BuildField("critical_certifier");
				J.BuildObject;
			END;
			J.BuildArray;
			J.BuildField("limits");
			J.BuildObject;
			RETURN J.GetJson();
		END JsonCertifsEnds;
	
	PROCEDURE JsonCertifsEndsText (): TextViews.View;
		
		VAR
			
			t: TextModels.Model;
			f: TextMappers.Formatter;
		
		BEGIN (*JsonCertifsEndsText*)
			t := TextModels.dir.New();
			f.ConnectTo(t);
			JsonCertifsEnds().Write(f);
			RETURN TextViews.dir.New(t);
		END JsonCertifsEndsText;
	
	PROCEDURE JsonCertifsEndsPrint*;
		
		VAR
			
			s: Views.Title;
		
		BEGIN (*JsonCertifsEndsPrint*)
			Dialog.MapString("#Duniter0:LimitsC", s);
			Views.OpenAux(JsonCertifsEndsText(), s);
		END JsonCertifsEndsPrint;
	
	END Duniter0Events.

Duniter0Events.PrintMembershipsEnds;

Duniter0Events.JsonMembershipsEndsPrint;

Duniter0Events.PrintMissingEnds;

Duniter0Events.JsonMissingEndsPrint;

Duniter0Events.PrintCertifsEnds;

Duniter0Events.JsonCertifsEndsPrint;
