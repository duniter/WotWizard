(* 
Duniter0: WotWizard.

Copyright (C) 2017 GérardMeunier

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  for more details.

You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*)

MODULE Duniter0CertificationsPrint;
	
	

	IMPORT
		
		B := Duniter0Blockchain, BA := Duniter0Basic, Dialog, StdLog;
	
	PROCEDURE PrintFrom*;
		
		VAR
			
			uid: B.String;
			from, to: B.Pubkey;
			block: INTEGER;
			ok, okP, b: BOOLEAN;
			pos: B.CertPos;
			mt, t: LONGINT;
			dt: BA.DateTime;
			exp: LONGINT;
			s: Dialog.String;
		
		BEGIN (*PrintFrom*)
			StdLog.Clear; StdLog.Open;
			Dialog.MapString("#Duniter0:CertificationsFrom", s);
			StdLog.String(s); StdLog.Ln; StdLog.Ln;
			ok := B.IdNextUidM(TRUE, uid);
			WHILE ok DO
				b := B.IdUid(uid, from); ASSERT(b);
				IF B.CertFrom(from, pos) THEN
					StdLog.String(uid); StdLog.String(" ->"); StdLog.Ln;
					okP := pos.CertNextPos(from, to);
					WHILE okP DO
						b := B.Cert(from, to, block, exp); ASSERT(b);
						StdLog.Tab; 
						b := B.IdPub(to, uid); ASSERT(b);
						StdLog.String(uid);
						StdLog.Tab; 
						b := B.TimeOf(block, mt, t);
						BA.TimestampToString(mt, dt);
						StdLog.String(dt); StdLog.Ln;
						okP := pos.CertNextPos(from, to);
					END;
				END;
				ok := B.IdNextUidM(FALSE, uid);
			END;
			StdLog.Ln;
		END PrintFrom;
	
	PROCEDURE PrintTo*;
		
		VAR
			
			uid: B.String;
			from, to: B.Pubkey;
			block: INTEGER;
			ok, okP, b: BOOLEAN;
			pos: B.CertPos;
			mt, t: LONGINT;
			dt: BA.DateTime;
			exp: LONGINT;
			s: Dialog.String;
		
		BEGIN (*PrintTo*)
			StdLog.Clear; StdLog.Open;
			Dialog.MapString("#Duniter0:CertificationsTo", s);
			StdLog.String(s); StdLog.Ln; StdLog.Ln;
			ok := B.IdNextUidM(TRUE, uid);
			WHILE ok DO
				b := B.IdUid(uid, to); ASSERT(b);
				IF B.CertTo(to, pos) THEN
					StdLog.String(uid); StdLog.String(" <-"); StdLog.Ln;
					okP := pos.CertNextPos(from, to);
					WHILE okP DO
						b := B.Cert(from, to, block, exp);
						StdLog.Tab; 
						b := B.IdPub(from, uid); ASSERT(b);
						StdLog.String(uid);
						StdLog.Tab; 
						b := B.TimeOf(block, mt, t);
						BA.TimestampToString(mt, dt);
						StdLog.String(dt); StdLog.Ln;
						okP := pos.CertNextPos(from, to);
					END;
				END;
				ok := B.IdNextUidM(FALSE, uid);
			END;
			StdLog.Ln;
		END PrintTo;
	
	END Duniter0CertificationsPrint.

Duniter0CertificationsPrint.PrintFrom;
Duniter0CertificationsPrint.PrintTo;
