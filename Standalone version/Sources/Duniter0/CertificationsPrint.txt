(* 
Duniter0: WotWizard.

Copyright (C) 2017 GérardMeunier

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  for more details.

You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*)

MODULE Duniter0CertificationsPrint;
	
	

	IMPORT
		
		B := Duniter0Blockchain, BA := Duniter0Basic, S := UtilSort, Dialog, Math, TextMappers, TextModels, TextViews, Views;
	
	TYPE
		
		Dist = POINTER TO ARRAY OF INTEGER;
		
		Certif = POINTER TO RECORD
			id: B.String;
			created: BA.DateTime;
			exp: LONGINT;
			expS: BA.DateTime;
		END;
		
		Certifs = POINTER TO ARRAY OF Certif;
		
		CertSort = RECORD (S.T)
			c: Certifs;
		END;
	
	PROCEDURE (VAR cs: CertSort) Less (c1, c2: INTEGER): BOOLEAN;
		
		BEGIN (*Less*)
			RETURN (ABS(cs.c[c1].exp) < ABS(cs.c[c2].exp)) OR (ABS(cs.c[c1].exp) = ABS(cs.c[c2].exp)) & (BA.CompP(cs.c[c1].id, cs.c[c2].id) = BA.lt);
		END Less;
	
	PROCEDURE (VAR cs: CertSort) Swap (c1, c2: INTEGER);
		
		VAR
			
			c: Certif;
		
		BEGIN (*Swap*)
			c := cs.c[c1]; cs.c[c1] := cs.c[c2]; cs.c[c2] := c;
		END Swap;
	
	PROCEDURE Moments (d: Dist; OUT mean, sDev: REAL; OUT nb, median: INTEGER);
		
		VAR
			
			m, n, i, q: INTEGER;
			nb2: LONGINT;
		
		BEGIN (*Moments*)
			m := LEN(d) - 1;
			n := 0; nb := 0; nb2 := 0;
			FOR i := 0 TO m DO
				INC(n, d[i]);
				INC(nb, i * d[i]);
				INC(nb2, i * i * d[i]);
			END;
			mean := nb / n;
			sDev := Math.Sqrt(nb2 / n - mean * mean);
			median := -1; q := 0;
			REPEAT
				INC(median);
				INC(q, d[median]);
			UNTIL 2 * q >= n;
		END Moments;
	
	PROCEDURE PrintMoments (VAR f: TextMappers.Formatter; d: Dist);
		
		VAR
			
			mean, sDev: REAL;
			nb, median, i: INTEGER;
			s: Dialog.String;
		
		BEGIN (*PrintMoments*)
			Moments( d, mean, sDev, nb, median);
			Dialog.MapString("#Duniter0:Certifications", s);
			f.WriteInt(nb); f.WriteString(" " + s);
			f.WriteLn;
			Dialog.MapString("#Duniter0:Mean", s);
			f.WriteString(s + " = "); f.WriteReal(mean);
			f.WriteLn;
			Dialog.MapString("#Duniter0:Median", s);
			f.WriteString(s + " = "); f.WriteInt(median);
			f.WriteLn;
			Dialog.MapString("#Duniter0:SDev", s);
			f.WriteString(s + " = "); f.WriteReal(sDev);
			f.WriteLn;
			Dialog.MapString("#Duniter0:Distribution", s);
			f.WriteString(s);
			f.WriteLn;
			FOR i := 0 TO LEN(d) - 1 DO
				f.WriteTab; f.WriteInt(i);
				f.WriteTab; f.WriteInt(d[i]);
				f.WriteLn;
			END;
			f.WriteString("~");
		END PrintMoments;
	
	PROCEDURE PrintFrom*;
		
		VAR
			
			uid: B.String;
			from, to: B.Pubkey;
			block, m, q: INTEGER;
			ok, okP, b: BOOLEAN;
			pos: B.CertPos;
			mt, t: LONGINT;
			s: Views.Title;
			tt: TextModels.Model;
			f: TextMappers.Formatter;
			dist: POINTER TO ARRAY OF INTEGER;
			cs: CertSort;
		
		BEGIN (*PrintFrom*)
			m := 0;
			ok := B.CertNextFrom(TRUE, pos);
			WHILE ok DO
				m := MAX(m, pos.CertPosLen());
				ok := B.CertNextFrom(FALSE, pos);
			END;
			NEW(dist, m + 1);
			tt := TextModels.dir.New();
			f.ConnectTo(tt);
			f.WriteMsg("#Duniter0:CertificationsFrom");
			f.WriteLn; f.WriteLn;
			ok := B.IdNextUid(TRUE, uid);
			WHILE ok DO
				b := B.IdUid(uid, from); ASSERT(b);
				q := 0;
				f.WriteString(uid); f.WriteString(" →"); f.WriteLn;
				IF B.CertFrom(from, pos) THEN
					NEW(cs.c, pos.CertPosLen());
					okP := pos.CertNextPos(from, to);
					WHILE okP DO
						NEW(cs.c[q]);
						b := B.Cert(from, to, block, cs.c[q].exp); ASSERT(b);
						b := B.IdPub(to, cs.c[q].id); ASSERT(b);
						b := B.TimeOf(block, mt, t);
						BA.TimestampToString(mt, cs.c[q].created);
						BA.TimestampToString(cs.c[q].exp, cs.c[q].expS);
						INC(q);
						okP := pos.CertNextPos(from, to);
					END;
				END;
				INC(dist[q]);
				IF q > 0 THEN
					cs.QuickSort(0, q - 1);
					FOR q := 0 TO LEN(cs.c) - 1 DO
							f.WriteTab; 
							f.WriteString(cs.c[q].id);
							f.WriteTab; 
							f.WriteString(cs.c[q].created); f.WriteString(" → ");
							f.WriteString(cs.c[q].expS); f.WriteLn;
							okP := pos.CertNextPos(from, to);
					END;
				END;
				ok := B.IdNextUid(FALSE, uid);
			END;
			f.WriteLn;
			PrintMoments(f, dist);
			Dialog.MapString("#Duniter0:Certifications", s);
			Views.OpenAux(TextViews.dir.New(tt), s);
		END PrintFrom;
	
	PROCEDURE PrintTo*;
		
		VAR
			
			uid: B.String;
			from, to: B.Pubkey;
			block, m, q: INTEGER;
			ok, okP, b: BOOLEAN;
			pos: B.CertPos;
			mt, t: LONGINT;
			s: Views.Title;
			tt: TextModels.Model;
			f: TextMappers.Formatter;
			dist: POINTER TO ARRAY OF INTEGER;
			cs: CertSort;
		
		BEGIN (*PrintTo*)
			m := 0;
			ok := B.CertNextTo(TRUE, pos);
			WHILE ok DO
				m := MAX(m, pos.CertPosLen());
				ok := B.CertNextTo(FALSE, pos);
			END;
			NEW(dist, m + 1);
			tt := TextModels.dir.New();
			f.ConnectTo(tt);
			f.WriteMsg("#Duniter0:CertificationsTo");
			f.WriteLn; f.WriteLn;
			ok := B.IdNextUid(TRUE, uid);
			WHILE ok DO
				b := B.IdUid(uid, to); ASSERT(b);
				q := 0;
				f.WriteString(uid); f.WriteString(" ←"); f.WriteLn;
				IF B.CertTo(to, pos) THEN
					NEW(cs.c, pos.CertPosLen());
					okP := pos.CertNextPos(from, to);
					WHILE okP DO
						NEW(cs.c[q]);
						b := B.Cert(from, to, block, cs.c[q].exp); ASSERT(b);
						b := B.IdPub(from, cs.c[q].id); ASSERT(b);
						b := B.TimeOf(block, mt, t);
						BA.TimestampToString(mt, cs.c[q].created);
						BA.TimestampToString(cs.c[q].exp, cs.c[q].expS);
						INC(q);
						okP := pos.CertNextPos(from, to);
					END;
				END;
				INC(dist[q]);
				IF q > 0 THEN
					cs.QuickSort(0, q - 1);
					FOR q := 0 TO LEN(cs.c) - 1 DO
							f.WriteTab; 
							f.WriteString(cs.c[q].id);
							f.WriteTab; 
							f.WriteString(cs.c[q].created); f.WriteString(" → ");
							f.WriteString(cs.c[q].expS); f.WriteLn;
							okP := pos.CertNextPos(from, to);
					END;
				END;
				ok := B.IdNextUid(FALSE, uid);
			END;
			f.WriteLn;
			PrintMoments(f, dist);
			Dialog.MapString("#Duniter0:Certifications", s);
			Views.OpenAux(TextViews.dir.New(tt), s);
		END PrintTo;
	
	END Duniter0CertificationsPrint.

Duniter0CertificationsPrint.PrintFrom;
Duniter0CertificationsPrint.PrintTo;
