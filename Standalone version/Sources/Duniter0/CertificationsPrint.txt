(* 
Duniter0: WotWizard.

Copyright (C) 2017 GérardMeunier

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  for more details.

You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*)

MODULE Duniter0CertificationsPrint;
	
	

	IMPORT
		
		B := Duniter0Blockchain, BA := Duniter0Basic, Dialog, TextMappers, TextModels, TextViews, Views;
	
	PROCEDURE PrintFrom*;
		
		VAR
			
			uid: B.String;
			from, to: B.Pubkey;
			block, n: INTEGER;
			ok, okP, b: BOOLEAN;
			pos: B.CertPos;
			mt, t: LONGINT;
			dt: BA.DateTime;
			exp: LONGINT;
			s: Views.Title;
			tt: TextModels.Model;
			f: TextMappers.Formatter;
		
		BEGIN (*PrintFrom*)
			tt := TextModels.dir.New();
			f.ConnectTo(tt);
			f.WriteMsg("#Duniter0:CertificationsFrom");
			f.WriteLn; f.WriteLn;
			n := 0;
			ok := B.IdNextUid(TRUE, uid);
			WHILE ok DO
				b := B.IdUid(uid, from); ASSERT(b);
				IF B.CertFrom(from, pos) THEN
					f.WriteString(uid); f.WriteString(" →"); f.WriteLn;
					okP := pos.CertNextPos(from, to);
					WHILE okP DO
						INC(n);
						b := B.Cert(from, to, block, exp); ASSERT(b);
						f.WriteTab; 
						b := B.IdPub(to, uid); ASSERT(b);
						f.WriteString(uid);
						f.WriteTab; 
						b := B.TimeOf(block, mt, t);
						BA.TimestampToString(mt, dt);
						f.WriteString(dt); f.WriteLn;
						okP := pos.CertNextPos(from, to);
					END;
				END;
				ok := B.IdNextUid(FALSE, uid);
			END;
			f.WriteLn;
			Dialog.MapString("#Duniter0:Certifications", s);
			f.WriteInt(n); f.WriteString(" " + s);
			f.WriteLn;
			Views.OpenAux(TextViews.dir.New(tt), s);
		END PrintFrom;
	
	PROCEDURE PrintTo*;
		
		VAR
			
			uid: B.String;
			from, to: B.Pubkey;
			block, n: INTEGER;
			ok, okP, b: BOOLEAN;
			pos: B.CertPos;
			mt, t: LONGINT;
			dt: BA.DateTime;
			exp: LONGINT;
			s: Views.Title;
			tt: TextModels.Model;
			f: TextMappers.Formatter;
		
		BEGIN (*PrintTo*)
			tt := TextModels.dir.New();
			f.ConnectTo(tt);
			f.WriteMsg("#Duniter0:CertificationsTo");
			f.WriteLn; f.WriteLn;
			n := 0;
			ok := B.IdNextUid(TRUE, uid);
			WHILE ok DO
				b := B.IdUid(uid, to); ASSERT(b);
				IF B.CertTo(to, pos) THEN
					f.WriteString(uid); f.WriteString(" ←"); f.WriteLn;
					okP := pos.CertNextPos(from, to);
					WHILE okP DO
						INC(n);
						b := B.Cert(from, to, block, exp);
						f.WriteTab; 
						b := B.IdPub(from, uid); ASSERT(b);
						f.WriteString(uid);
						f.WriteTab; 
						b := B.TimeOf(block, mt, t);
						BA.TimestampToString(mt, dt);
						f.WriteString(dt); f.WriteLn;
						okP := pos.CertNextPos(from, to);
					END;
				END;
				ok := B.IdNextUid(FALSE, uid);
			END;
			f.WriteLn;
			Dialog.MapString("#Duniter0:Certifications", s);
			f.WriteInt(n); f.WriteString(" " + s);
			f.WriteLn;
			Views.OpenAux(TextViews.dir.New(tt), s);
		END PrintTo;
	
	END Duniter0CertificationsPrint.

Duniter0CertificationsPrint.PrintFrom;
Duniter0CertificationsPrint.PrintTo;
