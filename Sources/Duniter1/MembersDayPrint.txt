(* 
Duniter1: WotWizard.

Copyright (C) 2017 GérardMeunier

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  for more details.

You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*)

MODULE Duniter1MembersDayPrint;
	
	

	IMPORT
		
		BA := Duniter1BasicPrint, GS := Duniter1GQLSender, Dialog, HermesAxes, HermesScat, HermesUtil, HermesViews, Strings, TextMappers, TextModels, TextViews, J := UtilJson, Views;
	
	CONST
		
		defaultPeriod = 1;
		
		waitDelay = 100;
		
		membersDayJson = "MembersDay";
	
	TYPE
		
		 Action = POINTER TO RECORD (BA.WaitFor)
			period: INTEGER;
		END;
		
		Members* = POINTER TO RECORD
			counts*: POINTER TO ARRAY OF INTEGER;
			block*: INTEGER;
			now*: LONGINT;
		END;
	
	VAR
		
		globalMembers*: Members;

	PROCEDURE DoPrint (period: INTEGER; a: POINTER TO ARRAY OF INTEGER; block: INTEGER; now: LONGINT); (* period in days *)
		
		CONST
			
			scatColor = 00BF00BFH;
			scatShape = HermesScat.point;
		
		VAR
			
			t: TextModels.Model;
			f: TextMappers.Formatter;
			i, m: INTEGER;
			s: Views.Title;
			p: HermesViews.View;
			ts: POINTER TO ARRAY OF HermesUtil.Dot;
			tr: HermesViews.Trace;
			dt: BA.DateTime;
		
		BEGIN (*DoPrint*)
			t := TextModels.dir.New();
			f.ConnectTo(t);
			f.WriteMsg("#Duniter1:Block");
			f.WriteString(" ");
			f.WriteInt(block);
			f.WriteTab;
			BA.TimestampToString(now, dt);
			f.WriteString(dt);
			f.WriteString(" (UTC+0)");
			f.WriteLn; f.WriteLn;
			IF a # NIL THEN
				m := LEN(a);
				FOR i := 0 TO m - 1 DO
					f.WriteTab;
					f.WriteInt(i * period);
					f.WriteTab;
					f.WriteInt(a[i]);
					f.WriteLn;
				END;
			END;
			Dialog.MapString("#Duniter1:MembersNbDay", s);
			Views.OpenAux(TextViews.dir.New(t), s);
			IF a # NIL THEN
				p := HermesViews.New();
				NEW(ts, m);
				FOR i := 0 TO m - 1 DO
					ts[i].x := i * period;
					ts[i].y := a[i];
				END;
				tr := HermesScat.Insert(p, ts, scatShape, FALSE, FALSE, FALSE);
				tr.ChangeColor(scatColor);
				tr := HermesAxes.Insert(p, FALSE, TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, 't', 'd', 0, 3);
				tr := HermesAxes.Insert(p, TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, 'n', '', 0, 3);
				Views.OpenAux(p, s);
			END;
		END DoPrint;
	
	PROCEDURE (a: Action) End (IN name: ARRAY OF CHAR);
		
		VAR
			
			j: J.Json;
		
		BEGIN (*End*)
			j := J.ReadFile(BA.waitDir, name); ASSERT(j # NIL, 100);
			NEW(globalMembers);
			j.ApplyTo(globalMembers);
			DoPrint(a.period, globalMembers.counts, globalMembers.block, globalMembers.now);
			globalMembers := NIL;
		END End;
	
	PROCEDURE Print* (period: INTEGER);
		
		VAR
			
			a: Action;
			s: ARRAY 12 OF CHAR;
		
		BEGIN (*Print*)
			BA.SwitchOff(BA.waitDir, membersDayJson + ".json");
			Strings.IntToString(period, s);
			GS.Send("Duniter1MembersDay", "CountP", "period:" + s, membersDayJson);
			NEW(a);
			a.period := period;
			a.Do(BA.waitDir, membersDayJson + ".json", waitDelay);
		END Print;
	
	PROCEDURE PrintDef*;
		
		BEGIN (*PrintDef*)
			Print(defaultPeriod);
		END PrintDef;
	
	END Duniter1MembersDayPrint.

Duniter1MembersDayPrint.PrintDef;

"Duniter1MembersDayPrint.Print(20)"
