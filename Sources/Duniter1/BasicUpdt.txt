(* 
Duniter1: WotWizard.

Copyright (C) 2017 GérardMeunier

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  for more details.

You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*)

MODULE Duniter1BasicUpdt;
	
	
	
	(* Basic functions *)

	IMPORT
		
		A := UtilAvlTree, B := UtilBBTree2, Converters, Files, HostFiles, Kernel, Strings, TextMappers, TextModels, TextViews, UC := UnicodeCase_Mapping, UL := UnicodeLetter_Mapping, UtilLog, Views;
	
	CONST
		
		version = "3.1.0";
		
		(* Directory & name of the file where the path to the Duniter database is written *)
		initDir = "Duniter1/Rsrc";
		initName = "Init.txt";
		logName = "LogUpdt.txt";
		logOldName = "LogUpdt1.txt";
		
		(* Default path to the Duniter database *)
		duniBaseDef = "D:\.config\duniter\duniter_default\wotwizard-export.db";
		
		textImpConv = "CpcUtf8Conv.ImportUtf8";
		textExpConv = "CpcUtf8Conv.ExportUtf8";
		
		revoked* = MIN(LONGINT); (* Limit date for revoked members *)
		
		lt* = A.lt;
		eq* = A.eq;
		gt* = A.gt;
	
	TYPE
		
		String* = POINTER TO ARRAY OF CHAR;
	
	VAR
		
		lg*: UtilLog.Log;
	
		duniDir-,
		duniBase-: Files.Name; (* Path to the Duniter database *)
		
		utf8Conv*: Converters.Converter;
	
	PROCEDURE VRegister* (v: Views.View; l: Files.Locator; name: Files.Name; errNumber: INTEGER; IN from: ARRAY OF CHAR);
		
		CONST
			
			maxRepeats = 10;
		
		VAR
			
			res, n: INTEGER;
		
		BEGIN (*VRegister*)
			n := maxRepeats;
			REPEAT
				Views.Register(v, Views.dontAsk, l, name, utf8Conv, res);
				DEC(n);
			UNTIL (res = 0) OR (n = 0);
			lg.Assert(res = 0, errNumber, res, from);
		END VRegister;
	
	(* Extract the significant character at the position i in s, or further; only alphanumeric characters are significant, and their case of lowest rank is returned *)
	PROCEDURE DownC (IN s: ARRAY OF CHAR; VAR i: INTEGER): CHAR;
		
		VAR
			
			c: CHAR;
		
		PROCEDURE LetterOrDigit (c: CHAR): BOOLEAN;
			
			BEGIN (*LetterOrDigit*)
				RETURN (c >= '0') & (c <= '9') OR UL.IsLetter(ORD(c));
			END LetterOrDigit;
		
		BEGIN (*DownC*)
			LOOP
				c := s[i];
				IF c = 0X THEN
					EXIT;
				END;
				INC(i);
				IF LetterOrDigit(c) THEN
					c := MIN(UC.Lower(c), UC.Upper(c));
					EXIT;
				END;
			END;
			RETURN c;
		END DownC;
	
	(* Standard comparison procedure for identifiers; they are first compared with only significant characters and case ignored, and if still equal, with all characters and case taken into account *)
	PROCEDURE CompP* (IN s1, s2: ARRAY OF CHAR): BYTE;
		
		VAR
			
			i1, i2: INTEGER;
			c1, c2: CHAR;
		
		BEGIN (*CompP*)
			i1 := 0; i2 := 0;
			REPEAT
				c1 := DownC(s1, i1);
				c2 := DownC(s2, i2);
			UNTIL (c1 # c2) OR (c1 = 0X);
			IF c1 < c2 THEN
				RETURN lt;
			END;
			IF c1 > c2 THEN
				RETURN gt;
			END;
			i1 := 0;
			WHILE (s1[i1] = s2[i1]) & (s1[i1] # 0X) DO
				INC(i1);
			END;
			IF s1[i1] < s2[i1] THEN
				RETURN lt;
			END;
			IF s1[i1] > s2[i1] THEN
				RETURN gt;
			END;
			RETURN eq;
		END CompP;
	
	(* Help emptying the memory by calling the garbage collector *)
	PROCEDURE Collect*;
		
		BEGIN (*Collect*)
			IF Kernel.WouldFinalize() THEN
				Kernel.Collect;
			ELSE
				Kernel.FastCollect;
			END;
		END Collect;
	
	PROCEDURE SplitFullName (full: ARRAY OF CHAR; OUT path, name: ARRAY OF CHAR): BOOLEAN;
		
		VAR
			
			res, drive, p: INTEGER;
			ok: BOOLEAN;
		
		BEGIN (*SplitFullName*)
			res := 0;
			LOOP
				Strings.Find(full, '\', res, res);
				IF res = - 1 THEN
					EXIT;
				END;
				full[res] := '/';
			END;
			Strings.Find(full, ':', 0, res);
			ok := (res = - 1) OR (res = 1);
			IF ok THEN
				drive := res;
				Strings.Find(full, '/', res + 1, p);
				WHILE p >= 0 DO
					res := p;
					Strings.Find(full, '/', res + 1, p);
				END;
				IF res < 0 THEN
					path := "";
					name := full$;
				ELSE
					IF res <= drive + 1 THEN
						Strings.Extract(full, 0, res + 1, path);
					ELSE
						Strings.Extract(full, 0, res, path);
					END;
					Strings.Extract(full, res + 1, LEN(full), name);
				END;
				ok := LEN(name$) > 0;
			END;
			RETURN ok;
		END SplitFullName;
	
	PROCEDURE Init;
		
		VAR
			
			l: Files.Locator;
			v: Views.View;
			s: TextMappers.Scanner;
			t: TextModels.Model;
			f: TextMappers.Formatter;
			name: Files.Name;
			res: INTEGER;
		
		BEGIN (*Init*)
			HostFiles.IgnoreAsk;
			l := Files.dir.This(initDir); ASSERT(l.res = 0, 100);
			Files.dir.Delete(l, logOldName); ASSERT(l.res IN {0, 2}, 101);
			Files.dir.Rename(l, logName, logOldName, Files.dontAsk); ASSERT(l.res IN {0, 2}, 102);
			lg := UtilLog.NewLog(initDir, logName, TRUE);
			lg.Msg("Version " + version); lg.Msg("");
			utf8Conv := Converters.list;
			WHILE (utf8Conv # NIL) & ((utf8Conv.imp # textImpConv) OR (utf8Conv.exp # textExpConv) OR (utf8Conv.fileType # "txt")) DO
				utf8Conv := utf8Conv.next;
			END;
			ASSERT(utf8Conv # NIL, 103);
			duniBase := '';
			name := initName;
			v := Views.Old(Views.dontAsk, l, name, utf8Conv);
			IF v = NIL THEN
				duniBase := duniBaseDef;
				t := TextModels.dir.New();
				f.ConnectTo(t);
				f.WriteString('"' + duniBase + '"');
				name := initName;
				Views.Register(TextViews.dir.New(t), Views.dontAsk, l, name, utf8Conv, res);
				ASSERT(res = 0, 104);
			ELSE
				ASSERT(v IS TextViews.View, 105);
				s.ConnectTo(v(TextViews.View).ThisModel());
				s.Scan;
				IF s.type = TextMappers.string THEN
					duniBase := s.string$;
				END;
			END;
			IF ~SplitFullName(duniBase, duniDir, name) THEN
				duniDir := '';
			END;
			(* Can we mix both sets of constants *)
			ASSERT((B.lt = lt) & (B.eq = eq) & (B.gt = gt), 106);
		END Init;
	
	BEGIN (*Duniter1BasicUpdt*)
		Init;
	END Duniter1BasicUpdt.
