Babel Quick-Start

Copyright © 2001-2015, by Gérard Meunier

Version 8-September-2015

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  for more details.

You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

Saved from 'Component Pascal Collection' url http://www.zinnamturm.eu

Babel Compiler Compiler.

Babel is a metacompiler. From a language definition document, it builds the tables of a compiler (lexical, syntactic and semantic) and store them in a binary file. A special module, included in the final program, reads this file and then can compile texts of the language.

You find examples of using Babel here:
	1.	CpcIndex - Cross reference builder and pretty printer.
	2.	CpcRegul - Regular Lexical Analyser.
	3.	CpcStats - Statistic of accessing the CPC website.
	4.	CpcWhere - Where, Indexer of Source & Symbol files.
	5.	Hermes - Data Acquisition & Scientific Spreadsheet
	6.	Kine - Simulation Tools.
	7.	Plot - 2D plotting tools including data fit.
	8.	Prolog - Prolog Language Interpreter
	9.	Tp2cp - Convert Turbo Pascal to Component Pascal.
	10.	UtilFunc (Util) - Inline Functions
	11.	UtilMaths (Util) - Mathematical Editor


Contents:

	1	Installation
	2	How to use it?
	3	Reference


1	Installation	 Up

1. Preconditions.
	Babel doesn't use any other CPC services. 

2. Unpack all files via Tools -> Decode.
	 List of contents 

3. Compile the following modules:
	 DevCompiler.CompileThis 
	BabelCompil BabelInit BabelInit0 BabelCars BabelDef BabelLexique BabelSyntaxe BabelAnaSem
	BabelInterface BabelAvl BabelBabel BabelExtract BabelBinText BabelFind BabelTestgram BabelTestallgram BabelDebug
	BabelEBNF2Babel 

4. Compile the following Babel definition files:
	 BabelBabel.CompileThis 
	BabelAOS BabelBabel BabelCPRef BabelCPRefWin BabelCPRRef BabelCPSym BabelEBNF BabelEBNF2Babel BabelFind
	BabelOberon1 BabelOberon2 BabelTP4 
	 CPC Notes 

5. Update menus:
	"StdMenuTool.UpdateAllMenus; CpcDropDown.MakeDropDowns"
	A new menu Babel appears.


2	How to use it?	 Up

1. Create a language definition document. E.g.:


2. Place the caret in the previous document and compile it using "Babel->Compile". A text of comments is produced: by now, you can discard it.
3. Create a program which imports the module BabelCompil, implements its abstract methods and reads "test.tbl". E.g.:

4. Place the caret in the previous module and compile it using Ctrl-K.
5. This program can read an arithmetic expression written between quotation marks and using numbers, "+", "-", "*" or ".", "/", "(" and ")" and display its value in the log window. Write such an expression, e.g.:

	"-8+3*5"
	
Select it and press:
	
	BabelTest.Do;

To see the content of the binary tables, install the corresponding converter with Babel->Install tbl converter and open "Babel/Rsrc/Test.tbl" with this converter.
You'll find a complete documentation of Babel here.
To run the examples Testx, from Test1 to Test4, do as above: compile the definition document TestxBab with Babel>Compile; compile the module Testx with ctrl-K and run the program by pressing the commander at its end, after having selected the expression placed below.

If an error occurs while compiling a definition document, a new text opens, showing the error messages. To locate the error, use "Babel->Find position...", insert the line and column numbers of the error in the corresponding fields, select the definition document and press "Find': the caret is placed in front of the error. You can also insert the position of the error in the third field and press "Find".

Once it is compiled, you can try a definition document. Open a text written in the defined language, use the command "Babel->Test grammar...", click on the "Browse" button and select the .tbl file corresponding to the definition document, and then press "Test". If the text checks the grammar, "Ok" appears in the status bar, otherwise errors are written on the log. If you change and recompile the .bab file, press the "Reset Grammar" button to reload the compiler.
You can also test a grammar on a set of text files:
1.	Use the command "Babel->Test grammar on all modules...".
2.	Click on the "Browse" button and select the .tbl file corresponding to the definition document.
3.	Type the name of a root directory, inside which you want to test files, into the "Root" field. Let this field empty if the search is to be made in the BlackBox directories.
4.	Type the name of the subdirectories where you want to do the search (e.g. "Cpc", "Form", "System", etc... for the first level, or "Docu", "Mod", "Rsrc", etc... for the second level) in the "Directories" field. If this field is left empty, all subdirectories will be searched.
5.	Click on "Test". A list of links to files in error opens (possibly empty); click on a link and the file opens with the error positions marked.
6.	If you change and recompile the .bab file, press the "Reset Grammar" button to reload the compiler.

If you wish to start from an EBNF definition, you can use EBNF2Babel.
The current language of Babel is English, but you can look at the French documentation.


3	Reference	 Up


Use it and enjoy! - ¡Úsalos y disfrútalos! - Bonne utilisation - Приятного использованияn - Powodzenia - Viel Spaß

Gérard Meunier
mailto:gemeu@free.fr
